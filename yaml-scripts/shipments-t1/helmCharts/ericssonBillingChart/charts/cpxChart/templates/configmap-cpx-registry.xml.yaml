apiVersion: v1
kind: ConfigMap
metadata:
  name: eric-bss-eb-cpx-registry.xml
data:
  CPX_Registry.xml: |
    <?xml version="1.0" encoding="utf-8"?>
    <!DOCTYPE ComponentRegistry PUBLIC 'ComponentRegistry.dtd' "ComponentRegistry.dtd" >

    <ComponentRegistry>
    <Node name="FUNC_WCLT">



         <!--
            - The application name used for window titles.
            - This value is directly accessible through method
            ApplicationSettings.getApplicationName()
            This key is also used as parent permission key for initialization of the
            PermissionChecker.
          -->
          <KeyValue key="ApplicationName" type="String" value="CPX" comment="The name of the web client application" />
          <!--
            - The version of the application.
          -->
          <KeyValue key="ApplicationVersion" type="String" value="1.0" comment="The version of the web client application" />

        <!-- Deployment scope. Available values are BSCS and CBIO. -->
        <KeyValue key="DeploymentScope" type="String" value="CBIO" comment="Deployment scope"/>

         <!--
          Starts the User settings Solutionunit directly after the user has logged into the
          client. The User settings Solutionunit is a solution unit that can be used to force
          the user to do some initial settings like selecting a business unit or a dealer.
          The workflow of the User settings Solutionunit is defined by the client but the name
          of the SolutionUnit must always be "UserSettings".
          -->
        <KeyValue key="StartUserSettingsSU" type="Boolean" value="true" comment="The name of the web client application" />


         <!--
          SoiName for security initialization
          -->
          <KeyValue key="SoiNameForSecurity" type="String" value="SECURITY" comment="The name of the security SOI" />
           <!--
          SoiVersion for security initialization
          -->
          <KeyValue key="SoiVersionForSecurity" type="String" value="3" comment="The version of the security SOI" />
           <!--
             - The implementation of the ContainerFactory
             - Default is com.lhs.ccb.cfw.cda.servicelayer.SoiContainerFactory
             -
             - Used by SoiServerGateway
          -->
          <!-- configuration key="ContainerFactoryImpl"
                     constant="com.lhs.ccb.cfw.cda.servicelayer.SoiContainerFactory" /-->

          <!-- The SOI name the client should connect to. -->
          <KeyValue key="CIL" type="String" value="CIL" comment="The name of the SOI."/>

          <!-- The SOI version the client should connect to. -->
          <KeyValue key="CIL_Version" type="String" value="7" comment="The version of the SOI."/>

          <!--
            - The implementation of the ModelContainer
            - Default is com.lhs.ccb.cfw.cda.servicelayer.model.DefaultModelContainer
            -
            - Used by SoiContainerFactory
          -->
          <KeyValue key="ModelContainerImpl" type="String" value="com.lhs.ccb.cfw.cda.servicelayer.model.WebModelContainer" comment="The implementation of the model container." />

          <!--
            - When set to "true" force application to send only changed attributes
            - to the CORBA server.
            - "false" means that all attrubutes will be sent to the CORBA server.
            - This flag doesn't affect HTTP communication.
          -->
          <KeyValue key="SendOnlyChangedData" type="Boolean" value="true" comment="" />


          <!--
            - Permission checker class to be used by the client framework.
          -->
          <KeyValue key="PermissionChecker" type="String" value="com.lhs.pd.util.ClientPermissionChecker" comment="" />



           <!--
            - Specifies the root path where help files are stored.
            - Help root path is a directory located in the web server.
            - Example: help path is "help". Then the root direcory for the help files is
            - http://host:port/CMS/help where http://host:port/CMS is the path of the deployed application.
            - If the root help path should have different sub directories these sub directories
            - must be specified in the workflow configuration xml file. For this have a look at
            - workflowconfiguration.dtd.
          -->
          <KeyValue key="HelpRootPath" type="String" value="help" comment="" />

        <!--
          - The configuration files for default models (each default model must have a configuration file)
          - used by: ModelMetaDataRepository
        -->
        <Node name="ModelConfigs">
            <KeyValue key="CatalogueModels" value="com/lhs/pd/catalogue/resource/CatalogueModelConfig.xml" />
            <KeyValue key="CMSModels" value="com/lhs/pd/catalogue/resource/CMSModelConfig.xml" />
        </Node>

          <!--
            - Global Resource bundle file for general error messages.
            - This resoucebundle file should be used to define global error messages,
            - that can occur in several pages.
            -
            - Used by: ErrorUtil class of CFW to obtain the error messages.
          -->
          <KeyValue key="CommonErrorBundle" type="String"  value="com/lhs/pd/util/resource/CommonErrorsBundle" comment=""/>

         <!--
            - Hook that is called from the client framework after a Service Accessor (Service Object) is created
            - This class reinitialises the Business unit and the dealer for the user
           -->
          <KeyValue key="UserInitialisation"  type="String"  value="com.lhs.pd.util.ClientUserInitialisation"/>

           <!-- Branding options -->
        <Node name="Branding">

            <!--
              -	The class that implements the branding for this application.
                If no value is specified the default framework branding implementation is used.

            <KeyValue key="Class" type="String" value="com.lhs.ccb.cfw.wcs.branding.BusinessUnitBrandingAdapter"/>
             -->
            <!--
              - List all business units as nodes that have a different appearance as the default.
                The name of the node is the business unit identifier.

            <Node name="2">
                <KeyValue key="StyleSheet_bscs_main" type="String" value="webresources/css/bscs_main.css" comment="Path to the stylesheet used for this business unit."/>
                <KeyValue key="StyleSheet_bscs_main_expanded" type="String" value="webresources/css/bscs_main_expanded.css" comment="Path to the expanded stylesheet used for this business unit."/>
                <KeyValue key="StyleSheet_bscs_dojo" type="String" value="webresources/css/bscs_dojo.css" comment="Path to the dojo stylesheet used for this business unit."/>
            </Node>
            -->

        </Node>

         <!--
            - User attributes names,(Stored in user session by UserPropertiesFacade) whose chage should be observed and,
              as a result  a SESSION.CHANGE will be performed on the reference connection.

            - Note  the attribute names should be separated from each other by comma(,).
            -
            - Used by: UserAttributesObservable.java
          -->
        <KeyValue key="ObservedUserAttributes"  type="String"  value="CP_ID"/>

        <!-- Model file name for CPS as export options, used for command ESH_TASK.WRITE -->
        <KeyValue key="ExportOpt1_WithoutPrices"  type="String"  value="contProviderMD.xml"/>
        <KeyValue key="ExportOpt2_OnlySelPriceList"  type="String"  value="contProviderMD.xml"/>
        <KeyValue key="ExportOpt3_Both"  type="String"  value="contProviderFullMD.xml"/>
        <KeyValue key="ExportOpt4_PriceListsBSCS"  type="String"  value="contIntMD.xml"/>
        <KeyValue key="ExportOpt5_Complete"  type="String"  value="contIntMD.xml"/>

        <!-- Number of rows for a page for showing catalogue elements -->
        <KeyValue key="CatalogueElement_PageSize"  type="Integer"  value="12"/>

        <!--
           List of files containing the client's application context configuration
         -->
        <Node name="ApplicationContextConfigs">
            <KeyValue key="rootApplicationContext-cpx.xml" value=""
                      comment="The first application context configuration file of the CX client" />
        </Node>


    </Node>
    </ComponentRegistry>