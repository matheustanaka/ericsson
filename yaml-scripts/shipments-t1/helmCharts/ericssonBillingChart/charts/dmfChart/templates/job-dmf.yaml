apiVersion: batch/v1
kind: Job
metadata:
  name: eric-bss-eb-dmfjob
  labels:
    app: eb-database-dmfJob
    chart: {{ template "eric-bss-eb-dmfjob.chart" . }}
    {{- include "eric-bss-eb-dmfjob.kubernetesIoInfo" . | nindent 4 }}
    heritage: {{ .Release.Service }}
  annotations:
  {{- include "eric-bss-eb-dmfjob.productInfo" . | indent 4 }}
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "-1000"
    "helm.sh/hook-delete-policy": hook-succeeded, before-hook-creation
spec:
  template:
    metadata:
      labels:
        app: eb-database-dmfjob
        eric-bss-eb-network-database-client: 'true'
        {{- include "eric-bss-eb-dmfjob.kubernetesIoInfo" . | nindent 8 }}
      annotations:
      {{- include "eric-bss-eb-dmfjob.productInfo" . | indent 8 }}
    spec:
      securityContext:
        {{- include "eric-bss-eb-dmfjob.checkPodUserLoginData" . | nindent 8 }}
      {{- if .Values.global.rbac.sa_roles_create }}
      serviceAccountName: {{ .Chart.Name }}-sa
      {{- end }}
      {{- if $.Values.global.imageCredentials.pullSecret }}
      imagePullSecrets:
        - name: {{ $.Values.global.imageCredentials.pullSecret }}
      {{- end }}
      initContainers:
        - name: init-copydbscripts
          # containerKey identifies the section inside .Values.images and .Values.imageCredentials to be used here
          {{ $templDict := dict "Values" $.Values "containerKey" "init-copydbscripts" }}
          image: "{{ template "eric-bss-eb-dmfjob.registryUrl" $templDict }}/{{ template "eric-bss-eb-dmfjob.repoPath" $templDict }}{{ index $.Values "images" $templDict.containerKey "name" }}:{{ index $.Values "images" $templDict.containerKey "tag" }}"
          imagePullPolicy: {{ template "eric-bss-eb-dmfjob.pullPolicy" $templDict }}
          command: ["/bin/bash"]
          args: ["-c", "umask 0007 && tar -xzf /dbscripts.tar.gz -C /dbscripts"]
          volumeMounts:
          - name: dbscripts-volume
            mountPath: /dbscripts
      containers:
        - name: eric-bss-eb-dmf
          # containerKey identifies the section inside .Values.images and .Values.imageCredentials to be used here
          {{ $templDict := dict "Values" .Values "containerKey" "dmf" }}
          image: "{{ template "eric-bss-eb-dmfjob.registryUrl" $templDict }}/{{ template "eric-bss-eb-dmfjob.repoPath" $templDict }}{{ index .Values "images" $templDict.containerKey "name" }}:{{ index .Values "images" $templDict.containerKey "tag" }}"
          imagePullPolicy: {{ template "eric-bss-eb-dmfjob.pullPolicy" $templDict }}
          command: ["/bin/sh"]
          args: ["-c","MigStart.pl init start --setup_file standard_upgrade_dmfjob_set.xml 1>/dmf/work/runDmfJobUpgradeEB_`date +'%Y-%m-%d_%H.%M.%S'`.log 2>&1"]
          env:
          - name: TZ
            value: "{{ .Values.global.timezone }}"
          - name: NLS_LANG
            value: "{{ .Values.global.nlsLang }}"
          - name: MIG_ROOT_DIR
            value: "/dbscripts"
          - name: MIG_WORK_DIR
            value: "/dmf/work"
          - name: MIG_SETUP_DIR
            value: "/dbscripts/database/share"
          {{ if $.Values.global.databaseTls.enable }}
          - name: ORA_SEC_WLT
            value: "/oratns/secret/admin"
          {{ end }}
          volumeMounts:
          - name: dbscripts-volume
            mountPath: /dbscripts
          - name: tnsnames-ora-volume
            mountPath: /oratns/tnsnames.ora
            subPath: tnsnames.ora
          - name: sqlnet-ora-volume
            mountPath: /oratns/sqlnet.ora
            subPath: sqlnet.ora
          - name: standard-res
            mountPath: /dbscripts/database/share/standard_1_res.xml
            subPath: standard_1_res.xml
          - name: standard-par
            mountPath: /dbscripts/database/share/standard_1_par.xml
            subPath: standard_1_par.xml
          - name: std-upgrade-set
            mountPath: /dbscripts/database/share/standard_upgrade_dmfjob_set.xml
            subPath: standard_upgrade_dmfjob_set.xml
          - name: dmfjob-log-volume
            mountPath: /dmf/work
          {{ if $.Values.global.databaseTls.enable }}
          - name: wallet-admin-volume
            mountPath: /oratns/secret/admin
          {{ end }}
      {{- if $.Values.nodeSelector }}
      nodeSelector: {{ toYaml $.Values.nodeSelector | nindent 8 }}
      {{- else if $.Values.global.nodeSelector }}
      nodeSelector: {{ toYaml $.Values.global.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if $.Values.affinity }}
      affinity: {{ toYaml $.Values.affinity | nindent 8 }}
      {{- else if $.Values.global.affinity }}
      affinity: {{ toYaml $.Values.global.affinity | nindent 8 }}
      {{- end }}
      restartPolicy: Never
      volumes:
      - name: dbscripts-volume
        emptyDir: {}
      - name: tnsnames-ora-volume
        configMap:
          name: eric-bss-eb-dmfjob-tnsnames.ora
      - name: sqlnet-ora-volume
        configMap:
          name: eric-bss-eb-dmfjob-sqlnet.ora
      - name: standard-res
        configMap:
          name: {{ .Values.overrideConfigmap.dmfjobStandardResXml | default "eric-bss-eb-dmfjob-standard-res.xml" }}
      - name: standard-par
        configMap:
          name: {{ .Values.overrideConfigmap.dmfjobStandardParXml | default "eric-bss-eb-dmfjob-standard-par.xml" }}
      - name: std-upgrade-set
        configMap:
          name: eric-bss-eb-dmfjob-std-upgrade-set.xml
      - name: dmfjob-log-volume
        persistentVolumeClaim:
          claimName: eric-bss-eb-dmfjob-pvc-log
      {{ if $.Values.global.databaseTls.enable }}
      - name: wallet-admin-volume
        secret:
          secretName: "{{ .Values.global.databaseTls.clientAdminSecretName }}"
      {{ end }}
  backoffLimit: 0
