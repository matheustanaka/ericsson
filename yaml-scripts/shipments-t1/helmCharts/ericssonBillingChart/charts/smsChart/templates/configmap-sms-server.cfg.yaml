apiVersion: v1
kind: ConfigMap
metadata:
  name: eric-bss-eb-sms-server.cfg
data:
  smsserver.cfg: |
    # This is configuration file with default parameters
    # for the SMSServer application. It's loaded by the application
    # on startup.
    #
    #Please Note that for submiting SMS and receiving the actual coresponding response messages, the usual configuration setting is :
    #bind-mode= t (transmitter for the sending messages), r (receiver for the receiving messages) bind-mode= tr (transceiver for sending and receiving messages).
    #Important is that the both bind-modes should be run within sync mode. Only with such configurations the SMS sending status can
    #be evaluated properly.
    #

    # This is the IP address of SMSC
    ip-address={{ .Values.global.sms.smscHost }}

    # SMSC Port to bind to
    port={{ .Values.global.sms.smscPort }}

    # Your SMSC system id
    system-id={{ .Values.global.sms.smscSystemId }}

    # The address range this smpp client will serve

    addr-ton=0
    addr-npi=0
    address-range=

    # The source address for this client

    source-ton=0
    source-npi=0
    source-address=333

    # The default destination address

    destination-ton=0
    destination-npi=0

    # The receive timeout is a timeout for trying to receive a message
    # from the SMSC. If you want go to infinite wait until a PDU
    # is received, set the receive-timeout to -1. Otherwise
    # set the receive-timeout to number of seconds.

    receive-timeout=10


    # This is receiving mode. If set to sync, then the application
    # waits for response after sending a request pdu. If set to async,
    # the application doesn't wait for responses, rather they are passed to
    # and implementation of ServerPDUListener by the Receiver.
    # The listener is also passed every request pdu received from the smsc.
    # Possible values are "sync" and "async"

    sync-mode=sync

    #
    # The BSCS Database parameters required to connect to the BSCS database.
    # Specify:
    # - either dbUrl with a connect string to utilize tnsnames.ora,
    # - or if dbUrl is undefined, smsserver uses dbHost, dbPort, dbSid
    #   to create a simple connection

    dbUrl=jdbc:oracle:thin:@{{ .Values.global.bscsDb }}

    # for TCPS connections, wallet_location and cipher_suites MUST be defined
    # for TCP connections, wallet_location and cipher_suites MUST NOT be defined
    {{ if .Values.global.databaseTls.enable }}
    wallet_location=/oratns/secret
    cipher_suites={{.Values.global.databaseTls.cipherSuites}}
    {{ end }}


    # values for simple TCP connections without tnsnames.ora
    #dbHost={{ .Values.global.databaseServerName }}
    #dbPort={{ .Values.global.databaseServerPort }}
    #dbSid={{ .Values.global.bscsDb }}

    dbUser=SMS_SERVER

    # Set the follwoing equal to YES or NO depending whether you wish to monitor
    # for SMS messages in the BSCS database
    # and on the file system
    start-database-monitor=YES
    start-file-monitor=NO
    # These directories are relative to the WORK directory
    send-directory=/SMS_SEND/
    processed-directory=/SMS_PROCESSED/

    work-dir=/workdir
    #work-dir=D:\data\Wataniya_SMS\Wal_SMS_Server\work\

    # configuration of the SMS text's encoding type
    # please uncomment the appriopriate line as needed
    # if no value will be set then UTF8 will be used as default
    #smsTextEncodingType=ASCII
    #smsTextEncodingType=Cp1252
    #smsTextEncodingType=ISO8859_1
    #smsTextEncodingType=UnicodeBig
    smsTextEncodingType=UnicodeBigUnmarked
    #smsTextEncodingType=UnicodeLittle
    #smsTextEncodingType=UnicodeLittleUnmarked
    #smsTextEncodingType=UTF8
    #smsTextEncodingType=UTF-16

    # database encoding conversion
    # ex: convert(SMS_TEXT,'AL16UTF16','AR8ISO8859P6') as SMS_TEXT
    # by default no conversion is needed
    #dbEncodingFrom=AR8ISO8859P6
    #dbEncodingTo=AL16UTF16

    # configure data coding according to SMPP 4.3 specification
    # common examples:
    # 0 SMSC default language
    # 1 IA5/ASCII
    # 2 Octet unspecified
    # 3 Latin 1/ISO-8859-1
    # 6 Cyrllic/ISO-8859-5
    # 7 Latin/Hebrew/ISO-8859-8
    # 8 UCS2(ISO/IEC-10646)
    dataCoding=8

    # handling of long messages
    # if useMultiMessage is set then sequence number and total number of parts are set on the request
    # if useUDH is set then User Data Header and message is put on the payload
    # if both are not set (or set to false) then message parts are sent in several sms
    useMultiMessage=true
    useUDH=false

    {{ if .Values.global.ebTruststore.trustStoreName }}
    # TLS configuration
    trustStorePath=/ssl/{{ .Values.global.ebTruststore.trustStoreName }}
    trustStorePassword={{ .Values.global.ebTruststore.trustStorePassword }}
    # More than one TLS version can be defined using comma, for example: TLSv1, TLSv1.1, TLSv1.2, SSLv3
    tlsVersion=TLSv1.2
    {{ end }}
