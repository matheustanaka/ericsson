apiVersion: v1
kind: ConfigMap
metadata:
  name: eric-bss-eb-cms-func-frmwk-srv-registry.xml
data:
  FUNC_FRMWK_SRV_Registry.xml: |
    <?xml version="1.0" encoding="utf-8"?>
    <!DOCTYPE ComponentRegistry PUBLIC "ComponentRegistry.dtd" "ComponentRegistry.dtd" >

    <!--
    The registry of the FUNC_FRMWK_SRV component.
    SECURITY-related settings are not included, see SECURITY_Registry.xml
    Database-related settings are not included, see FUNC_FRMWK_SRV_DB_Registry.xml
    Setting of Federated Factory are not included, see FED_FACTORY-Registry.xml

    Note: this registry also serves as template for component registries
    (components should copy this file in own resource directory and fill as required)
    -->
    <ComponentRegistry>

        <Node name="FUNC_FRMWK_SRV">

            <KeyValue key="SOINamingRoot" value="com/lhs/private/soi" comment="Root context of ServiceRoots of SOI servers in CORBA Naming Service."/>

            <KeyValue key="CDFRootDirectory" value="cdf" comment="Root directory for the command definition files. Case sensitive entry."/>
            <KeyValue key="SOIRootDirectory" value="soi" comment="Root directory for the service oriented interface definition files. Case sensitive entry."/>

            <!--
            List of SOI definition files.
            Ignored if empty.
            Filenames must be entered as "key" attribute, the "value" attribute remains empty.
            -->
            <Node name="SOIDefinitions">
            </Node>

            <!--
            List of alternative components, whose CDF directories are also searched for specified SOI.
            Ignored if empty.
            -->
            <Node name="CDFAltComponents">
            </Node>

            <Node name="ServerController">
                    <KeyValue key="SrvCtrlPollTime" type="Integer" value="1" comment="Defines the control file polling interval in seconds. If not configured or misconfigured, a default of 1 second is applied."/>
                    <KeyValue key="ShutdownGracePeriod" type="Integer" value="15" comment="Defines the length of the grace period in seconds before the server is terminated.
                    The grace period only applies to the control file command GRACEFUL_SHUTDOWN. If not configured or misconfigured, a default of 15 seconds is applied."/>
            </Node>

            <KeyValue key="ValidationRootDirectory" value="val" comment="Root directory for the validation definition files. Case sensitive entry."/>
            <!--
            List of validation definitions. These files are searched in ValidationRootDirectory
            Filenames should be entered as "key" attributes, "value" attributes remains empty.
            -->
            <Node name="ValidationDefinitions" >
            </Node>

            <!-- SessionTimeout=60 minutes -->
            <KeyValue key="SessionTimeout" type="Integer" value="{{ .Values.funcFrmwkSrvReg.SessionTimeout }}"
                comment="Defines the timeout interval for all sessions
                (ServiceFactoryI's) created for this server. The
                timeout must be specified in seconds.
                If the timeout equals 0, the session will never time out."/>

            <!-- ValidationTimeout = 30 seconds -->
            <KeyValue key="ValidationTimeout" type="Integer" value="{{ .Values.funcFrmwkSrvReg.ValidationTimeout }}"
                comment="Defines the validation timeout after validation took place.
                Validation is started by calling validateI() on the service object.
                After this, only commitI() or rollbackI() are allowed. In order to prevent database locks
                the time between validateI() and commitI() or rollbackI() is limited by this validation timeout.
                The timeout value must be specified in seconds. If the timeout is 0 then there will be no time out."/>

            <!-- ClientCallbackInterval=0 DISABLED -->
            <KeyValue key="ClientCallbackInterval" type="Integer" value="{{ .Values.funcFrmwkSrvReg.ClientCallbackInterval }}"
                comment="Defines how often server calls ClientCallback::areYouAliveI method
                (CORBA method which could be implemented by the client)
                to ensure that client still exists. The specified time interval
                must be in seconds. The 0 value used to disable client callbacks"/>

            <KeyValue key="NamingServiceRefreshInterval" type="Integer" value="60"
                comment="Defines how often the server checks that the server still exists in the naming context.
                If the server not exists, because the naming service was restarted, a rebind will be executed.
                The specified time interval must be in seconds.
                Note: This check will be executed only in the containerized environment."/>

            <!-- CleanUpFilterLoggingThreadsInterval = 60 seconds -->
            <KeyValue key="CleanUpFilterLoggingThreadsInterval" type="Integer" value="60"
                comment="Defines how often server checks weather threads used in the context of filtered logging
                are still running or not. Threads which are not exists anymore will be unregistered for filtered logging.
                The specified time interval must be in seconds."/>

            <!-- Flag indicates whether to validate the input-SVLObjects against the  command definitions. Allowed values are 'true' and 'false'. -->
            <KeyValue key="ValidateInput" value="false" type="Boolean"/>

            <!-- This node holds the names of all DomainServiceAdapter classes. -->
            <Node name="ServiceLayerAdapterNames" >
                <KeyValue key="com.lhs.ccb.sfw.cca.CompositeCommandAdapter" value=""/>
            </Node>

            <!--
            List of listeners implementing ServerStartupListener interface.
            Each listener entered here will be instantiated using default constructor without parameters and
            corresponding before- and after- methods will be called during server initialization process
            -->
            <Node name="StartupListeners" >
                <KeyValue key="com.lhs.ccb.sfw.spring.SpringIntegrationServerEventListener" value="" />
                <KeyValue key="com.lhs.ccb.sfw.remoting.soi.BeanCreatingSOILayerStartupListener" value="" />
                <KeyValue key="com.lhs.ccb.sfw.security.SecurityInitializer" value=""/>
                <KeyValue key="com.lhs.ccb.sfw.license.LicenseManagerInitializer" value=""/>
            </Node>

            <!--
            List of listeners implementing ServerShutdown interface.
            Each listener entered here will be instantiated using default constructor without parameters and
            corresponding before- and after- methods will be called during server shutdown
            -->
            <Node name="ShutdownListeners" >
            </Node>

            <!-- Contains class to subclass mappings. It can be used to customize an
                 implementation class by subclassing. Each customized class needs a KeyValue
                 entry here mapping the parent class name of the core implementation to a
                 customized class name.
            -->
            <Node name="ClassLookupTable">
               <!--Use
               com.lhs.ccb.sfw.security.stub.EmptyPermissionChecker        to turn security off (only user/password will be checked using ORACLE connection)
               or
               com.lhs.ccb.sfw.security.db.BSCSPermissionChecker        for built-in permission checker (user/password will be checked using ORACLE connection, access rights checked against USERACCESS table)
               or
               com.lhs.ccb.sfw.security.RemoteServerPermissionChecker   for permission checker acting as a client of the remote security server. User/password and access rights are retrieved from the remote security server. Note: in this case your server doesn't starts without a security server!
               -->
               <KeyValue key="com.lhs.ccb.sfw.security.ServerPermissionCheckerI" value="com.lhs.ccb.sfw.security.db.BSCSPermissionChecker" />
            </Node>

            <!-- Settings to al to contact Security server -->
            <KeyValue key="SecurityNaming" value="com/lhs/public/soi/fedfactory1"
            comment="Points to the ServiceRootI in the naming service.
            This ServiceRootI could be a FederatedFactory (default) or a security service"/>

            <!--
            This node should be defined in the component's part of the registry

            <KeyValue key="SecurityArea" value=""
            comment="See 'PERMISSION' argument of 'USER_RIGHT.CHECK' command. Usually this is a top-element in the permission hierarchy"/>
            -->

            <KeyValue key="SecuritySOIName" value="SECURITY"/>
            <KeyValue key="SecuritySOIVersion" value="3"/>
            <KeyValue key="SecurityCommand" value="USER_RIGHT.CHECK"/>

            <KeyValue key="OnlineUsersRoleName" value="BSCS_OnlineUsers"/>
            <KeyValue key="ApplicationUsersRoleName" value="BSCS_ApplicationUsers"/>
            <!--
            This user used by SOI servers to perform login into security server
            -->
            <KeyValue key="SoiSystemUser" value="{{ .Values.funcFrmwkSrvReg.SoiSystemUser }}"/>

            <!--
            Specify command line options supported by any SOI server.
            The final node is merged from native FRMWK parameters and additional domain stuff.
            Example:
                <KeyValue key="option" value="description"/>
            -->
            <Node name="HelpScreen">
            </Node>

            <!--
            Setting related to license management
            -->
            <Node name="LicenseManagement">
                <KeyValue key="LicenseServerConnectionTimeout" type="Integer" value="2" comment="Time to wait for the server to connect in seconds."/>
                <KeyValue key="LicenseServerReadTimeout" type="Integer" value="20" comment="Time to wait for the server to read in seconds."/>
                <KeyValue key="UpdatePeriod" type="Integer" value="86400" comment="Duration for how long a cached license is valid in seconds. Accepted values are in the range 1..86400 (1s..1d). Default value is 86400 defined."/>
                <KeyValue key="CachePeriod" type="Integer" value="1296000" comment="Duration for how long the Sentinel server can be unavailable without further impact. Accepted values are in the range 1..1296000 (1s..15d).Default value is 1296000."/>
                <KeyValue key="ActivationFilePath" type="String" value="" comment="Path to the activation file with file name."/>
            </Node>

            <Node name="Statistics">
                <KeyValue key="ResetPeriodForAverageExecutionTimes" type="Integer" value="0" comment="If the value (in seconds) is greater than 0, the measurement
                for average execution times will be reset after the given period. Otherwise the average execution times apply to the lifetime of the server."/>
            </Node>
            <KeyValue key="KeepDefaultLocale" type="Boolean" value="false" comment="If set to true, the default locale of the process is not switched to the default
            language locale defined in the database (table LANGUAGE.LNG_DEF). For some languages the oracle java driver does not provide a NLS mapping and hence for those
            languages this entry must be set to true. Otherwise it can lead to problems creating new database connections." />

            <Node name="WorkflowSOINames">
                <KeyValue key="DCI" value=""/>
                <KeyValue key="WMI" value=""/>
                <KeyValue key="OMI" value=""/>
            </Node>
        </Node><!-- FUNC_FRMWK_SRV -->
    </ComponentRegistry>
