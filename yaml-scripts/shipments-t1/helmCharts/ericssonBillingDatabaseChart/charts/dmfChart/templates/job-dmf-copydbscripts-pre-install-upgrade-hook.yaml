{{- if .Values.global.runCopyDBScripts -}}
apiVersion: batch/v1
kind: Job

metadata:
  name: eric-bss-eb-dmf-copydbscripts-pre-install-upgrade-hook
  labels:
    app: eric-bss-eb-dmf
    chart: {{ template "eric-bss-eb-dmf.chart" . }}
    {{- include "eric-bss-eb-dmf.kubernetesIoInfo" . | nindent 4 }}
    heritage: {{ .Release.Service }}
  annotations:
  {{- include "eric-bss-eb-dmf.productInfo" . | indent 4 }}
    "helm.sh/hook": pre-install, pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": hook-succeeded, before-hook-creation
spec:
  template:
    metadata:
      name: "{{ .Release.Name }}"
      labels:
        app: eric-bss-eb-dmf
        chart: {{ template "eric-bss-eb-dmf.chart" . }}
        eric-bss-eb-dmf-network-database-client: 'true'
        {{- include "eric-bss-eb-dmf.kubernetesIoInfo" . | nindent 8 }}
        heritage: {{ .Release.Service }}
      annotations:
      {{- include "eric-bss-eb-dmf.productInfo" . | indent 8 }}
    spec:
      securityContext:
        {{- include "eric-bss-eb-dmf.checkPodUserLoginData" . | nindent 8 }}
      restartPolicy: Never
      {{- if .Values.global.rbac.sa_roles_create }}
      serviceAccountName: {{ .Chart.Name }}-sa
      {{- end }}
      {{- if $.Values.global.imageCredentials.pullSecret }}
      imagePullSecrets:
        - name: {{ $.Values.global.imageCredentials.pullSecret }}
      {{- end }}
      containers:
        - name: pre-install-upgrade-job-copydbscripts
          # containerKey identifies the section inside .Values.images and .Values.imageCredentials to be used here
          {{ $templDict := dict "Values" $.Values "containerKey" "pre-install-upgrade-job-copydbscripts" }}
          image: "{{ template "eric-bss-eb-dmf.registryUrl" $templDict }}/{{ template "eric-bss-eb-dmf.repoPath" $templDict }}{{ index $.Values "images" $templDict.containerKey "name" }}:{{ index $.Values "images" $templDict.containerKey "tag" }}"
          imagePullPolicy: {{ template "eric-bss-eb-dmf.pullPolicy" $templDict }}
          command: ["/bin/bash"]
          args: ["-c", "ls -l /pvc-dbscripts > /dmf/work/runCopyDBScripts_`date +'%Y-%m-%d_%H.%M.%S'`_1.log; mkdir -p /pvc-dbscripts/{{ index $.Values "images" $templDict.containerKey "tag" }} && tar -xzf /dbscripts.tar.gz -C /pvc-dbscripts/{{ index $.Values "images" $templDict.containerKey "tag" }} && ls -l /pvc-dbscripts >/dmf/work/runCopyDBScripts_`date +'%Y-%m-%d_%H.%M.%S'`_2.log"]
          volumeMounts:
            - name: dbscripts
              mountPath: /pvc-dbscripts
            - name: dmf-log-volume
              mountPath: /dmf/work
          env:
            - name: TZ
              value: "{{ .Values.global.timezone }}"
      {{- if $.Values.nodeSelector }}
      nodeSelector: {{ toYaml $.Values.nodeSelector | nindent 8 }}
      {{- else if $.Values.global.nodeSelector }}
      nodeSelector: {{ toYaml $.Values.global.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if $.Values.affinity }}
      affinity: {{ toYaml $.Values.affinity | nindent 8 }}
      {{- else if $.Values.global.affinity }}
      affinity: {{ toYaml $.Values.global.affinity | nindent 8 }}
      {{- end }}
      volumes:
        - name: dbscripts
          persistentVolumeClaim:
            claimName: eric-bss-eb-pvc-dbscripts
        - name: dmf-log-volume
          persistentVolumeClaim:
            claimName: eric-bss-eb-dmf-pvc-log
  backoffLimit: 0
{{- end -}}
