{{- range $index, $cdhDeployment := .Values.cdhDeployments }}
# A deployment is launched for each of the items in the tuple below.
# Every occurance of {{ . }} is replaced during each range loop by the current item.
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ $.Values.metadataName }}-{{ $cdhDeployment.name | lower}}"
  labels:
    app:  eric-bss-eb-cdh
    chart: {{ template "eric-bss-eb-cdh.chart" $ }}
    {{- include "eric-bss-eb-cdh.kubernetesIoInfo" $ | nindent 4 }}
    heritage: {{ $.Release.Service }}
  annotations:
  {{- include "eric-bss-eb-cdh.productInfo" $ | indent 4 }}
spec:
  # ensure that cdh -H30 is started only once, a full check is not possible, since
  # it could be started in different pods
  {{ if and (gt (int $cdhDeployment.replicaCount) 1) (contains "h30" $cdhDeployment.name ) }}
  replicas: 1
  {{ else }}
  # other deployments are started as defined in values.yaml
  replicas: {{ $cdhDeployment.replicaCount | default 1}}
  {{ end }}
  selector:
    matchLabels:
      app: eric-bss-eb-cdh
      app.kubernetes.io/instance: {{ $.Release.Name }}
  template:
    metadata:
      labels:
        app: eric-bss-eb-cdh
        {{- include "eric-bss-eb-cdh.kubernetesIoInfo" $ | nindent 8 }}
        eric-bss-eb-network-database-client: 'true'
        eric-bss-eb-network-data-client: 'true'
        eric-bss-eb-network-lem-client: 'true'
        eric-bss-eb-network-vault-client: 'true'
      annotations:
      {{- include "eric-bss-eb-cdh.productInfo" $ | indent 8 }}
    spec:
      terminationGracePeriodSeconds: {{ $.Values.terminationGracePeriodSeconds }}
      securityContext:
        {{- include "eric-bss-eb-cdh.checkPodUserLoginData" $ | nindent 8 }}
      hostIPC: false
      shareProcessNamespace: {{ $.Values.global.shareProcessNamespace }}
      {{- if $.Values.global.imageCredentials.pullSecret }}
      imagePullSecrets:
        - name: {{ $.Values.global.imageCredentials.pullSecret }}
      {{- end }}
      initContainers:
        - name: init-wait-for-data-cdh{{ $cdhDeployment.name | lower}}
          # containerKey identifies the section inside .Values.images and .Values.imageCredentials to be used here
          {{ $templDict := dict "Values" $.Values "containerKey" "init-wait-for-data-cdh" }}
          image: "{{ template "eric-bss-eb-cdh.registryUrl" $templDict }}/{{ template "eric-bss-eb-cdh.repoPath" $templDict }}{{ index $.Values "images" $templDict.containerKey "name" }}:{{ index $.Values "images" $templDict.containerKey "tag" }}"
          imagePullPolicy: {{ template "eric-bss-eb-cdh.pullPolicy" $templDict }}
          command: ["/bin/bash"]
          args: ["-c", "./waitForCondition.sh dmh {{ $.Values.global.conditionCheckInterval }} "]
          env:
          {{ if $.Values.global.dataHighAvailability.enable }}
          - name: DATA_CONNECT_NAME
            value: "{{ $.Values.global.dataServerName }}"
          - name: DATA_CONNECT_ADDRESS
            value: "T:eric-bss-eb-data-service:{{ $.Values.global.dataClusterPort }},T:eric-bss-eb-data1-service:{{ $.Values.global.dataClusterPort }}"
          - name: DATA_CONNECT_MODE
            value: "0"
          {{ else }}
          - name: DATA_SERVER_ADDRESS
            value: "T:eric-bss-eb-data-service:{{ $.Values.global.dataClusterPort }}"
          {{ end }}
          - name: TZ
            value: "{{ $.Values.global.timezone }}"
          - name: BSCS_LOG_FULL
            value: "/log/cdh{{ $cdhDeployment.name }}"
          volumeMounts:
          {{ if $.Values.global.securityTls.enable }}
          - name: tls-volume
            mountPath: "/tls/connect"
            readOnly: true
          {{ end }}
          - mountPath: /log
            name: logs-volume
        - name: init-wait-for-xrefs-cdh{{ $cdhDeployment.name | lower}}
          # containerKey identifies the section inside .Values.images and .Values.imageCredentials to be used here
          {{ $templDict := dict "Values" $.Values "containerKey" "init-wait-for-xrefs-cdh" }}
          image: "{{ template "eric-bss-eb-cdh.registryUrl" $templDict }}/{{ template "eric-bss-eb-cdh.repoPath" $templDict }}{{ index $.Values "images" $templDict.containerKey "name" }}:{{ index $.Values "images" $templDict.containerKey "tag" }}"
          imagePullPolicy: {{ template "eric-bss-eb-cdh.pullPolicy" $templDict }}
          command: ["/bin/bash"]
          args: ["-c", "./waitForCondition.sh checkXref {{ $.Values.global.conditionCheckInterval }} -U "]
          env:
          - name: TZ
            value: "{{ $.Values.global.timezone }}"
          - name: BSCS_LOG_FULL
            value: "/log/cdh{{ $cdhDeployment.name }}"
          volumeMounts:
          - mountPath: /workdir/XREF
            name: xref-volume
          - mountPath: /log
            name: logs-volume
      {{- if $.Values.global.rbac.sa_roles_create }}
      serviceAccountName: {{ $.Chart.Name }}-sa
      {{- end }}
      containers:
        - name: eric-bss-eb-rdh-udmap
          # containerKey identifies the section inside .Values.images and .Values.imageCredentials to be used here
          {{ $templDict := dict "Values" $.Values "containerKey" "rdh-udmap" }}
          image: "{{ template "eric-bss-eb-cdh.registryUrl" $templDict }}/{{ template "eric-bss-eb-cdh.repoPath" $templDict }}{{ index $.Values "images" $templDict.containerKey "name" }}:{{ index $.Values "images" $templDict.containerKey "tag" }}"
          imagePullPolicy: {{ template "eric-bss-eb-cdh.pullPolicy" $templDict }}
          resources:
            limits:
              memory: "{{ $.Values.rdhUdmap.resources.limits.memory}}"
              cpu: "{{ $.Values.rdhUdmap.resources.limits.cpu}}"
            requests:
              memory: "{{ $.Values.rdhUdmap.resources.requests.memory}}"
              cpu: "{{ $.Values.rdhUdmap.resources.requests.cpu}}"
          env:
          - name: K8S_ENV
            value: "true"
          {{ if $.Values.global.databaseTls.enable }}
          - name: ORA_SEC_WLT
            value: "/oratns/secret"
          {{ end }}
          - name: DXL_CONTINUE_AFTER_CORRUPT
            value: "{{ $.Values.global.tracingAndLogging.dxlContinueAfterCorrupt }}"
          {{ if $.Values.global.dataHighAvailability.enable }}
          - name: DATA_CONNECT_NAME
            value: "{{ $.Values.global.dataServerName }}"
          - name: DATA_CONNECT_ADDRESS
            value: "T:eric-bss-eb-data-service:{{ $.Values.global.dataClusterPort }},T:eric-bss-eb-data1-service:{{ $.Values.global.dataClusterPort }}"
          - name: DATA_CONNECT_MODE
            value: "0"
          {{ else }}
          - name: DATA_SERVER_ADDRESS
            value: "T:eric-bss-eb-data-service:{{ $.Values.global.dataClusterPort }}"
          {{ end }}
          - name: DATABASE_SERVER_NAME
            value: "{{ $.Values.global.databaseServerName }}"
          - name: DATABASE_SERVER_PORT
            value: "{{ $.Values.global.databaseServerPort }}"
          - name: DATABASE_SERVER_NAME_RTX
            value: "{{ $.Values.global.rtxDatabaseServerName }}"
          - name: DATABASE_SERVER_PORT_RTX
            value: "{{ $.Values.global.rtxDatabaseServerPort }}"
          - name: SHM_MAX_ENVIRONMENTS
            value: "{{ $.Values.rdhUdmap.envVariables.shmMaxEnvironments }}"
          - name: SHM_MAX_SECTORS
            value: "{{ $.Values.rdhUdmap.envVariables.shmMaxSectors }}"
          - name: SHM_MAX_SEGMENTS
            value: "{{ $.Values.rdhUdmap.envVariables.shmMaxSegments }}"
          - name: SHM_MIN_SEGMENT_SIZE
            value: "{{ $.Values.rdhUdmap.envVariables.shmMinSegmentSize }}"
          - name: TZ
            value: "{{ $.Values.global.timezone }}"
          {{ if $.Values.global.securityTls.enable }}
          - name: DATA_SSL_CONNECT
            value: "1"
          - name: DATA_CIPHER_LIST
            value: "{{ $.Values.global.securityTls.cipherList }}"
          {{ end }}
          {{ if $.Values.rdhUdmap.tracingAndLogging }}
          {{ if $.Values.rdhUdmap.tracingAndLogging.bscsErrorTimestamp }}
          - name: BSCS_ERROR_TIMESTAMP
            value: "{{ $.Values.rdhUdmap.tracingAndLogging.bscsErrorTimestamp }}"
          {{ end }}
          {{ if $.Values.rdhUdmap.tracingAndLogging.dtaTracefile }}
          - name: DTA_TRACEFILE
            value: "{{ $.Values.rdhUdmap.tracingAndLogging.dtaTracefile }}"
          {{ end }}
          {{ if $.Values.rdhUdmap.tracingAndLogging.dxlTracefile }}
          - name: DXL_TRACEFILE
            value: "{{ $.Values.rdhUdmap.tracingAndLogging.dxlTracefile }}"
          {{ end }}
          {{ if $.Values.rdhUdmap.tracingAndLogging.udrTracefile }}
          - name: UDR_TRACEFILE
            value: "{{ $.Values.rdhUdmap.tracingAndLogging.udrTracefile }}"
          {{ end }}
          {{ end }}
          - name: DATA_RETRY_TIME
            value: "{{ $.Values.dataRetry.dataRetryTime }}"
          - name: DATA_RETRY_TIME_MAX
            value: "{{ $.Values.dataRetry.dataRetryTimeMax }}"
          # Configure rdh start options
          - name: TRACE_LEVEL
            value: "{{ $.Values.rdhUdmap.traceLevel | default 0 }}"
          - name: USE_SLAVE
            value: "{{ $.Values.rdhUdmap.useSlave }}"
          - name: DATA_TIMEOUT
            value: "{{ $.Values.rdhUdmap.dataTimeout  }}"
          - name: OPTIONAL_PARAMETERS
            value: "{{ $.Values.rdhUdmap.optionalParameters }}"
          {{ if not $.Values.global.secretManager.enable }}
          - name: NO_SECRET_MANAGER
            value: "true"
          {{ end }}
          command: ["/bin/bash"]
          args: ["-c", "ulimit -c unlimited && mkdir -p {{ $.Values.global.coredumpDirectory }} && \
                  ./rdh -udmap -t $TRACE_LEVEL $USE_SLAVE $DATA_TIMEOUT $OPTIONAL_PARAMETERS"]
          volumeMounts:
          {{ if $.Values.global.securityTls.enable }}
          - name: tls-volume
            mountPath: "/tls/connect"
            readOnly: true
          {{ end }}
          {{ if $.Values.global.databaseTls.enable }}
          - name: wallet-volume
            mountPath: /oratns/secret
          {{ end }}
          - name: ctrl-volume
            mountPath: /workdir/CTRL
          - name: xref-volume
            mountPath: /workdir/XREF
          - name: pwdmgr-security-volume
            mountPath: /workdir/PWDMGR_SECURITY
          - name: logs-volume
            mountPath: /log
          - name: coredump-volume
            mountPath: "{{ $.Values.global.coredumpDirectory }}"
          - name: tnsnames-ora-volume
            mountPath: /oratns/tnsnames.ora
            subPath: tnsnames.ora
          - name: sqlnet-ora-volume
            mountPath: /oratns/sqlnet.ora
            subPath: sqlnet.ora
          - mountPath: /dev/shm
            name: dshm
          {{ if and ($.Values.global.secretManager.enable) ($.Values.global.secretManager.vault.caSecretName) }}
          - name: secretmanager-tls-volume
            mountPath: "/tls/secretManager/vault"
            readOnly: true
          {{ end }}
          - name: vault-clientcfg-xml-volume
            mountPath: /ericssonbilling/resource/vault-clientcfg/vault-clientcfg.xml
            subPath: vault-clientcfg.xml
          - name: vault-clientcfg-dtd-volume
            mountPath: /ericssonbilling/resource/vault-clientcfg/vault-clientcfg.dtd
            subPath: vault-clientcfg.dtd
        {{- range $ind, $cdhCon := $cdhDeployment.cdhContainer }}
        {{- range $indin, $cdhNr := $cdhCon.instances }}
        - name: {{ $cdhNr | lower }}
          # containerKey identifies the section inside .Values.images and .Values.imageCredentials to be used here
          {{ $templDict := dict "Values" $.Values "containerKey" "cdh" }}
          image: "{{ template "eric-bss-eb-cdh.registryUrl" $templDict }}/{{ template "eric-bss-eb-cdh.repoPath" $templDict }}{{ index $.Values "images" $templDict.containerKey "name" }}:{{ index $.Values "images" $templDict.containerKey "tag" }}"
          imagePullPolicy: {{ template "eric-bss-eb-cdh.pullPolicy" $templDict }}
          resources:
            limits:
              memory: "{{ $.Values.resources.limits.memory}}"
              cpu: "{{ $.Values.resources.limits.cpu}}"
            requests:
              memory: "{{ $.Values.resources.requests.memory}}"
              cpu: "{{ $.Values.resources.requests.cpu}}"
          env:
          - name: K8S_ENV
            value: "true"
          {{ if $.Values.global.databaseTls.enable }}
          - name: ORA_SEC_WLT
            value: "/oratns/secret"
          {{ end }}
          - name: DXL_CONTINUE_AFTER_CORRUPT
            value: "{{ $.Values.global.tracingAndLogging.dxlContinueAfterCorrupt }}"
          - name: NLS_LANG
            value: "{{ $.Values.global.nlsLang }}"
          {{ if $.Values.global.dataHighAvailability.enable }}
          - name: DATA_CONNECT_NAME
            value: "{{ $.Values.global.dataServerName }}"
          - name: DATA_CONNECT_ADDRESS
            value: "T:eric-bss-eb-data-service:{{ $.Values.global.dataClusterPort }},T:eric-bss-eb-data1-service:{{ $.Values.global.dataClusterPort }}"
          - name: DATA_CONNECT_MODE
            value: "0"
          {{ else }}
          - name: DATA_SERVER_ADDRESS
            value: "T:eric-bss-eb-data-service:{{ $.Values.global.dataClusterPort }}"
          {{ end }}
          - name: DATABASE_SERVER_NAME
            value: "{{ $.Values.global.databaseServerName }}"
          - name: DATABASE_SERVER_PORT
            value: "{{ $.Values.global.databaseServerPort }}"
          - name: DATABASE_SERVER_NAME_RTX
            value: "{{ $.Values.global.rtxDatabaseServerName }}"
          - name: DATABASE_SERVER_PORT_RTX
            value: "{{ $.Values.global.rtxDatabaseServerPort }}"
          - name: TZ
            value: "{{ $.Values.global.timezone }}"
          - name: BSCS_LOG_FULL
            value: "/log/cdh{{ $cdhDeployment.name }}"
          - name: BSCS_LOG
            value: "$(BSCS_LOG_FULL)"
          - name: BSCS_LOG_POSTFIX
            value: "{{ $cdhNr | lower }}"
          {{ if $cdhDeployment.tracingAndLogging }}
          {{ if $cdhDeployment.tracingAndLogging.udrTracefile }}
          - name: UDR_TRACEFILE
            value: "{{ $cdhNr }}.{{ $cdhDeployment.tracingAndLogging.udrTracefile }}"
          {{ end }}
          {{ if $cdhDeployment.tracingAndLogging.dtaTracefile }}
          - name: DTA_TRACEFILE
            value: "{{ $cdhNr }}.{{ $cdhDeployment.tracingAndLogging.dtaTracefile }}"
          {{ end }}
          {{ if $cdhDeployment.tracingAndLogging.dxlTracefile }}
          - name: DXL_TRACEFILE
            value: "{{ $cdhNr }}.{{ $cdhDeployment.tracingAndLogging.dxlTracefile }}"
          {{ end }}
          {{ end }}
          {{ if $.Values.global.securityTls.enable }}
          - name: DATA_SSL_CONNECT
            value: "1"
          - name: DATA_CIPHER_LIST
            value: "{{ $.Values.global.securityTls.cipherList }}"
          {{ end }}
          - name: DATA_RETRY_TIME
            value: "{{ $.Values.dataRetry.dataRetryTime }}"
          - name: DATA_RETRY_TIME_MAX
            value: "{{ $.Values.dataRetry.dataRetryTimeMax }}"
          {{ if not $.Values.global.secretManager.enable }}
          - name: NO_SECRET_MANAGER
            value: "true"
          {{ end }}
          command: ["/bin/bash"]
          args: ["-c", "ulimit -c unlimited && mkdir -p {{ $.Values.global.coredumpDirectory }} && \
                 ./waitForShm.sh -bch -sleep {{ $.Values.global.conditionCheckInterval }} && exec ./cdh -{{ $cdhCon.type }}"]
          volumeMounts:
          {{ if $.Values.global.securityTls.enable }}
          - name: tls-volume
            mountPath: "/tls/connect"
            readOnly: true
          {{ end }}
          {{ if $.Values.global.databaseTls.enable }}
          - name: wallet-volume
            mountPath: /oratns/secret
          {{ end }}
          - mountPath: /workdir/XREF
            name: xref-volume
          - mountPath: /workdir/DOCS
            name: docs-volume
          - mountPath: /workdir/PWDMGR_SECURITY
            name: pwdmgr-security-volume
          - mountPath: /log
            name: logs-volume
          - name: coredump-volume
            mountPath: "{{ $.Values.global.coredumpDirectory }}"
          - mountPath: /ericssonbilling/resource/RAC_Setup.xml
            name: shared-rac-volume
            subPath: RAC_Setup.xml
          - name: tnsnames-ora-volume
            mountPath: /oratns/tnsnames.ora
            subPath: tnsnames.ora
          - name: sqlnet-ora-volume
            mountPath: /oratns/sqlnet.ora
            subPath: sqlnet.ora
          - mountPath: /dev/shm
            name: dshm
          {{ if and ($.Values.global.secretManager.enable) ($.Values.global.secretManager.vault.caSecretName) }}
          - name: secretmanager-tls-volume
            mountPath: "/tls/secretManager/vault"
            readOnly: true
          {{ end }}
          - name: vault-clientcfg-xml-volume
            mountPath: /ericssonbilling/resource/vault-clientcfg/vault-clientcfg.xml
            subPath: vault-clientcfg.xml
          - name: vault-clientcfg-dtd-volume
            mountPath: /ericssonbilling/resource/vault-clientcfg/vault-clientcfg.dtd
            subPath: vault-clientcfg.dtd
      {{- end }}
      {{- end }}
      {{- if index $.Values.nodeSelector (printf "%s" .) }}
      nodeSelector: {{ toYaml (index $.Values.nodeSelector (printf "%s" .)) | nindent 8 }}
      {{- else if $.Values.global.nodeSelector }}
      nodeSelector: {{ toYaml $.Values.global.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if $.Values.affinity }}
      affinity: {{ toYaml $.Values.affinity | nindent 8 }}
      {{- else if $.Values.global.affinity }}
      affinity: {{ toYaml $.Values.global.affinity | nindent 8 }}
      {{- end }}
      restartPolicy: "{{ $.Values.restartPolicy }}"
      volumes:
      {{ if $.Values.global.securityTls.enable }}
      - name: tls-volume
        secret:
          secretName: "{{ $.Values.global.securityTls.clientSecretName }}"
          items:
          - key: {{ $.Values.global.securityTls.trustedCertificateKey }}
            path: certificate.pem
      {{ end }}
      {{ if $.Values.global.databaseTls.enable }}
      - name: wallet-volume
        secret:
          secretName: "{{ $.Values.global.databaseTls.clientSecretName }}"
      {{ end }}
      - name: xref-volume
        persistentVolumeClaim:
          claimName: eric-bss-eb-pvc-xref
      - name: docs-volume
        persistentVolumeClaim:
          claimName: eric-bss-eb-pvc-docs
      - name: pwdmgr-security-volume
        persistentVolumeClaim:
          claimName: eric-bss-eb-pvc-pwdmgr-security
      - name: logs-volume
        persistentVolumeClaim:
          claimName: eric-bss-eb-pvc-logs
      - name: coredump-volume
        persistentVolumeClaim:
          claimName: eric-bss-eb-pvc-coredump
      - name: shared-rac-volume
        configMap:
          name: eric-bss-eb-cdh-rac-setup.xml
      - name: tnsnames-ora-volume
        configMap:
          name: eric-bss-eb-cdh-tnsnames.ora
      - name: sqlnet-ora-volume
        configMap:
          name: eric-bss-eb-cdh-sqlnet.ora
      - name: vault-clientcfg-xml-volume
        configMap:
          name: eric-bss-eb-cdh-vault-clientcfg.xml
      - name: vault-clientcfg-dtd-volume
        configMap:
          name: eric-bss-eb-cdh-vault-clientcfg.dtd
      {{ if and ($.Values.global.secretManager.enable) ($.Values.global.secretManager.vault.caSecretName) }}
      - name: secretmanager-tls-volume
        secret:
          secretName: "{{ $.Values.global.secretManager.vault.caSecretName }}"
          items:
          - key: {{ $.Values.global.secretManager.vault.caCertificate }}
            path: ca.pem
      {{ end }}
      - name: ctrl-volume
        emptyDir: {}
      - name: dshm
        emptyDir:
         medium: Memory
---
{{- end}}
