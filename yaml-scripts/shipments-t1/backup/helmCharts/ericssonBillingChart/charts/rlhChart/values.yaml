# Default values for rlhChart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

imageCredentials:
  eric-bss-eb-rlh:
    repoPath:
    pullPolicy:
    registry:
      url:
  init-wait-for-data:
    repoPath:
    pullPolicy:
    registry:
      url:
  init-wait-for-xrefs:
    repoPath:
    pullPolicy:
    registry:
      url:

images:
  eric-bss-eb-rlh:
    name: "eric-bss-eb-rlh"
    tag: "22.15.12"
  init-wait-for-data:
    name: "eric-bss-eb-wait-for-condition"
    tag: "22.15.12"
  init-wait-for-xrefs:
    name: "eric-bss-eb-wait-for-condition"
    tag: "22.15.12"

# Customizable start parameters for RLH.
# You can run more RLH instances with specific settings by defining a new block with:
# -name: will appear in pod name and log files
# -startParameters: your specific parameters
# -replicaCount: {1..n} only for load-only mode
rlhDeployments:
  - name: "bcg-1"
    startParameters: "-1"
    resources:
      limits:
        cpu: 1000m
        memory: 10Gi
      requests:
        cpu: 100m
        memory: 256Mi
    # To generate tracefiles, it is necessary set the tracefile name in the variables below.
    # These files will be stored in the log PVC.
    tracingAndLogging:
      # dtaTracefile: "dta.rlh-bcg-1.trc"
      dtaTracefile: ""
      # dxlTracefile: "dxl.rlh-bcg-1.trc"
      dxlTracefile: ""
      # udrTracefile: "udr.rlh-bcg-1.trc"
      udrTracefile: ""
  - name: "bcg-13"
    startParameters: "-13"
    resources:
      limits:
        cpu: 1000m
        memory: 10Gi
      requests:
        cpu: 100m
        memory: 256Mi
    tracingAndLogging:
      # dtaTracefile: "dta.rlh-bcg-13.trc"
      dtaTracefile: ""
      # dxlTracefile: "dxl.rlh-bcg-13.trc"
      dxlTracefile: ""
      # udrTracefile: "udr.rlh-bcg-13.trc"
      udrTracefile: ""
  - name: "bcg-14"
    startParameters: "-14"
    resources:
      limits:
        cpu: 1000m
        memory: 10Gi
      requests:
        cpu: 100m
        memory: 256Mi
    tracingAndLogging:
      # dtaTracefile: "dta.rlh-bcg-14.trc"
      dtaTracefile: ""
      # dxlTracefile: "dxl.rlh-bcg-14.trc"
      dxlTracefile: ""
      # udrTracefile: "udr.rlh-bcg-14.trc"
      udrTracefile: ""
  - name: "bcg-15"
    startParameters: "-15"
    resources:
      limits:
        cpu: 1000m
        memory: 10Gi
      requests:
        cpu: 100m
        memory: 256Mi
    tracingAndLogging:
      # dtaTracefile: "dta.rlh-bcg-15.trc"
      dtaTracefile: ""
      # dxlTracefile: "dxl.rlh-bcg-15.trc"
      dxlTracefile: ""
      # udrTracefile: "udr.rlh-bcg-15.trc"
      udrTracefile: ""
  - name: "bcg-16"
    startParameters: "-16"
    resources:
      limits:
        cpu: 1000m
        memory: 10Gi
      requests:
        cpu: 100m
        memory: 256Mi
    tracingAndLogging:
      # dtaTracefile: "dta.rlh-bcg-16.trc"
      dtaTracefile: ""
      # dxlTracefile: "dxl.rlh-bcg-16.trc"
      dxlTracefile: ""
      # udrTracefile: "udr.rlh-bcg-16.trc"
      udrTracefile: ""
  #- name: "bcg-1-iotaggr"
  #  startParameters: "-1 --iotaggregation"
  #  resources:
  #    limits:
  #      cpu: 1000m
  #      memory: 10Gi
  #    requests:
  #      cpu: 100m
  #      memory: 256Mi
    # To generate tracefiles, it is necessary set the tracefile name in the variables below.
    # These files will be stored in the log PVC.
  #  tracingAndLogging:
      # dtaTracefile: "dta.rlh-bcg-1-iotaggr.trc"
  #    dtaTracefile: ""
      # dxlTracefile: "dxl.rlh-bcg-1-iotaggr.trc"
  #    dxlTracefile: ""
      # udrTracefile: "udr.rlh-bcg-1-iotaggr.trc"
  #    udrTracefile: ""
  #- name: "bcg-13-iotaggr"
  #  startParameters: "-13 --iotaggregation"
  #  resources:
  #    limits:
  #      cpu: 1000m
  #      memory: 10Gi
  #    requests:
  #      cpu: 100m
  #      memory: 256Mi
  #  tracingAndLogging:
      # dtaTracefile: "dta.rlh-bcg-13-iotaggr.trc"
  #    dtaTracefile: ""
      # dxlTracefile: "dxl.rlh-bcg-13-iotaggr.trc"
  #    dxlTracefile: ""
      # udrTracefile: "udr.rlh-bcg-13-iotaggr.trc"
  #    udrTracefile: ""
  #- name: "bcg-14-iotaggr"
  #  startParameters: "-14 --iotaggregation"
  #  resources:
  #    limits:
  #      cpu: 1000m
  #      memory: 10Gi
  #    requests:
  #      cpu: 100m
  #      memory: 256Mi
  #  tracingAndLogging:
      # dtaTracefile: "dta.rlh-bcg-14-iotaggr.trc"
  #    dtaTracefile: ""
      # dxlTracefile: "dxl.rlh-bcg-14-iotaggr.trc"
  #    dxlTracefile: ""
      # udrTracefile: "udr.rlh-bcg-14-iotaggr.trc"
  #    udrTracefile: ""
  #- name: "bcg-15-iotaggr"
  #  startParameters: "-15 --iotaggregation"
  #  resources:
  #    limits:
  #      cpu: 1000m
  #      memory: 10Gi
  #    requests:
  #      cpu: 100m
  #      memory: 256Mi
  #  tracingAndLogging:
      # dtaTracefile: "dta.rlh-bcg-15-iotaggr.trc"
  #    dtaTracefile: ""
      # dxlTracefile: "dxl.rlh-bcg-15-iotaggr.trc"
  #    dxlTracefile: ""
      # udrTracefile: "udr.rlh-bcg-15-iotaggr.trc"
  #    udrTracefile: ""
  #- name: "bcg-16-iotaggr"
  #  startParameters: "-16 --iotaggregation"
  #  resources:
  #    limits:
  #      cpu: 1000m
  #      memory: 10Gi
  #    requests:
  #      cpu: 100m
  #      memory: 256Mi
  #  tracingAndLogging:
      # dtaTracefile: "dta.rlh-bcg-16-iotaggr.trc"
  #    dtaTracefile: ""
      # dxlTracefile: "dxl.rlh-bcg-16-iotaggr.trc"
  #    dxlTracefile: ""
      # udrTracefile: "udr.rlh-bcg-16-iotaggr.trc"
  #    udrTracefile: ""
  - name: "l-o-a3"
    startParameters: "--loadonly --appl 3"
    replicaCount: 1
    resources:
      limits:
        cpu: 1000m
        memory: 10Gi
      requests:
        cpu: 100m
        memory: 256Mi
    tracingAndLogging:
      # dtaTracefile: "dta.rlh-l-o-a3.trc"
      dtaTracefile: ""
      # dxlTracefile: "dxl.rlh-l-o-a3.trc"
      dxlTracefile: ""
      # udrTracefile: "udr.rlh-l-o-a3.trc"
      udrTracefile: ""

# Grace period for pod termination, which is used to shut down RLH gracefully.
# By default, k8s allows a graceful application shutdown within 30s.
# But for RLH a larger value is needed in some cases, e.g. if a large transaction
# size is used (for better performance), reload data from database.
terminationGracePeriodSeconds: 600

restartPolicy: Always

#DATA_RETRY_TIME, DATA_RETRY_TIME_MAX
#By default, there is no definition for a time interval in which applications try to reconnect to DaTA.
#If you set the environment variable, the value represents the time interval an application waits
#until it tries to reconnect to DaTA.
#Subsequent connection retries are performed under the following conditions:
# - A double time interval has elapsed and has exceeded a maximum of 60 seconds.
# - A double time interval has elapsed and the value specified by DATA_RETRY_TIME_MAX has been exceeded.
dataRetry:
  dataRetryTime:
  dataRetryTimeMax:

#A local nodeSelector definition has priority over the global definition above.
#nodeSelector: {}

# A local affinity definition has priority over the global definition.
# affinity: {}
# Example:
# affinity:
#   nodeAffinity:
#     preferredDuringSchedulingIgnoredDuringExecution:
#     - weight: 50
#       preference:
#         matchExpressions:
#         - key: topology.kubernetes.io/zone
#           operator: In
#           values:
#           - us-east-1a
#     - weight: 50
#       preference:
#         matchExpressions:
#         - key: topology.kubernetes.io/zone
#           operator: In
#           values:
#           - us-east-1b

suffix:

tnsnames:
  bscsdb: '{{ tpl .Values.global.tnsnames.bscsdb . }}'
  rtxdb: '{{ tpl .Values.global.tnsnames.rtxdb . }}'

sqlnet:
  ora: '{{ tpl .Values.global.sqlnet.ora . }}'
