apiVersion: v1
kind: ConfigMap
metadata:
  name: eric-bss-eb-cms-rootapplicationcontext-cms.xml
data:
  rootApplicationContext-cms.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <beans xmlns="http://www.springframework.org/schema/beans"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:util="http://www.springframework.org/schema/util"
           xmlns:tx="http://www.springframework.org/schema/tx"
           xmlns:aop="http://www.springframework.org/schema/aop"
           xmlns:context="http://www.springframework.org/schema/context"
           xsi:schemaLocation="
           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd
           http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd"
           default-autowire="byName">

        <context:annotation-config/>
        <context:component-scan base-package="com/lhs/CostControl/bscs_core" name-generator="com.lhs.ccb.sfw.spring.DefaultBeanNameGenerator">
            <context:include-filter type="assignable" expression="com.lhs.ccb.sfw.persistence.PersistenceDefinitionBase"/>
        </context:component-scan>

        <import resource="classpath*:applicationContext-docgen.xml" />
        <import resource="classpath*:applicationContext-jdatalib.xml" />
        <import resource="classpath*:applicationContext-util.xml" />
        <import resource="classpath*:applicationContext-sfw-infrastructure.xml" />
        <import resource="classpath*:applicationContext-cms-simpleServices.xml" />
        <import resource="classpath*:rootApplicationContext-securityServer.xml" />
        <import resource="classpath*:applicationContext-CMS-converters.xml" />

        <!-- This DaTA connection factory is for the notification RDRs  -->
        <bean id="dataConnectionFactory" class="com.lhs.dxl.jms.DXLDaTAConnectionFactory">
            <constructor-arg value="CMS"></constructor-arg><!-- Application Name -->
            <constructor-arg type="int" value="0"></constructor-arg><!-- Application Number -->
            <constructor-arg type="int" value="0"></constructor-arg><!-- Child Number -->
        </bean>

        <bean id="businessPartnerService" class="com.lhs.BusinessPartner.bscs_core.BusinessPartnerService" factory-method="getInstance" />

        <bean id="vaultClientManager"  class="com.lhs.ccb.sfw.security.password.vault.VaultClientManager">
            <property name="applicationName" value="cms"/>
        </bean>

        <!--  RECEIVER CONTEXT -->

        <bean id="receiverDestination" class="com.lhs.dxl.jms.DXLDaTADestination"/>
        <bean id="messageListener" class="com.lhs.dxl.support.DelegatingMessageListener">
            <property name="udrMessageListeners">
                <list>
                    <bean class="com.lhs.CostControl.bscs_core.SynchronizingBIRMessageListener"/>
                    <bean class="com.lhs.CostControl.bscs_core.BIRProcessingMessageListener"/>
                    <bean class="com.lhs.Contract.bscs_core.listeners.IvrChangeUdrMessageListener"/>
                    <bean class="com.lhs.Contract.bscs_core.listeners.ThresholdEventUdrMessageListener"/>
                    <bean class="com.lhs.Contract.bscs_core.listeners.ContractBlockUnblockUdrMessageListener"/>
                    <bean class="com.lhs.Contract.bscs_core.listeners.LifecycleChangeUdrMessageListener"/>
                    <bean class="com.lhs.Contract.bscs_core.listeners.CSNotificationMessageListener" />
                    <bean class="com.lhs.Contract.bscs_core.listeners.BillDocumentMessageListener" />
                    <bean class="com.lhs.dxl.support.TraceLogCommandListener">
                        <property name="maxTraceLogCommandItems" value="{{ .Values.dxlListeners.traceLogCommandListener.maxTraceLogCommandItems | default 50}}"/>
                    </bean>
                </list>
           </property>
        </bean>

        <bean id="dataConnectionInitializer" class="com.lhs.dxl.support.SimpleMessageListenerContainerInitializer">
            <property name="connectionFactory" ref="dataConnectionFactory"/>
            <property name="destination" ref="receiverDestination"/>
            <property name="messageListener" ref="messageListener"/>
            <property name="concurrentConsumers" value="1"/>
            <property name="simpleMessageListenerContainerBeanName" value="container"/>
            <property name="retryWaitTime" value="${DATA_RETRY_WAIT_TIME:5000}"/>
        </bean>

        <!-- END RECEIVER CONTEXT -->


        <!-- SENDER CONTEXT -->

        <bean id="senderConnectionFactory" class="com.lhs.dxl.jms.pool.PooledDXLDaTAConnectionFactory">
            <constructor-arg ref="dataConnectionFactory"/>
        </bean>

        <bean id="poolingDataConnectionFactory" class="com.lhs.dxl.jms.pool.PoolingDXLDaTAConnectionDatasource">
            <constructor-arg ref="senderConnectionFactory"/>
            <property name="minIdle" value="10"/>                           <!-- Minimum idle connections in pool. If no value is specified, the default value 10 will be used. -->
            <property name="maxIdle" value="50"/>                           <!-- Maximum idle connections in pool. If no value is specified, the default value 50 will be used. -->
            <property name="maxTotal" value="50"/>                          <!-- Maximum total connections in pool. If no value is specified, the default value 50 will be used. -->
            <property name="maxWaitMillis" value="-1"/>                     <!-- Maximum amount of time. If no value is specified, the default value -1 will be used. -->
        </bean>

        <bean id="senderDestination" class="com.lhs.dxl.jms.DXLDaTADestination"/>

        <bean id="cmsJmsTemplate" class="org.springframework.jms.core.JmsTemplate">
            <property name="connectionFactory" ref="poolingDataConnectionFactory"/>
            <property name="defaultDestination" ref="senderDestination"/>
        </bean>

        <bean id="eocSenderConnectionFactory" class="com.lhs.data.jms.DaTAConnectionFactory" />

        <bean id="eocSenderDestination" class="com.lhs.data.jms.DaTADestination">
            <constructor-arg>
                <ref bean="eocProfileMetadata" />
            </constructor-arg>
            <property name="messageConversionStrategy" ref="textMessageConversionStrategy" />
        </bean>

        <bean id="textMessageConversionStrategy" class="com.lhs.data.jms.JavaTextMessageConversionStrategy" />

        <bean id="eocProfileMetadata" class="com.lhs.data.driver.beans.MetaData">
            <constructor-arg index="0" value="258" />
            <constructor-arg index="1" value="1" />
            <constructor-arg index="2" value="1" />
            <constructor-arg index="3">
                <null />
            </constructor-arg>
        </bean>

        <bean id="eocCmsJmsTemplate" class="org.springframework.jms.core.JmsTemplate">
            <property name="connectionFactory" ref="eocSenderConnectionFactory" />
            <property name="defaultDestination" ref="eocSenderDestination" />
        </bean>

        <bean id="simpleDateFormat" class="java.text.SimpleDateFormat">
            <constructor-arg value="yyyy-MM-dd" />
        </bean>

        <bean id="mapBasedBooleanValueConverter" class="com.lhs.cms.product.service.impl.MapBasedBooleanParameterConverter" scope="singleton">
            <constructor-arg>
                <map key-type="java.lang.String" value-type="java.lang.Character">
                    <entry key="TRUE" value="Y" />
                    <entry key="FALSE" value="N" />
                    <entry key="true" value="Y" />
                    <entry key="false" value="N" />
                    <entry key="Y" value="Y" />
                    <entry key="N" value="N" />
                </map>
            </constructor-arg>
        </bean>

        <bean id="contractCharacteristicsMapper" class="org.dozer.DozerBeanMapper">
            <property name="mappingFiles">
                <list>
                    <value>dozer-global-configuration.xml</value>
                    <value>mapping/contract-characteristics-mappings.xml</value>
                    <value>mapping/product-characteristics-mappings.xml</value>
                    <value>mapping/resource-characteristics-mappings.xml</value>
                </list>
            </property>
            <property name="customConvertersWithId">
                <map>
                    <entry key="mapBasedBooleanValueConverter" value-ref="mapBasedBooleanValueConverter"/>
                    <entry key="SVLDateContractCharacteristicsValueConverter" value-ref="SVLDateContractCharacteristicsValueConverter"/>
                    <entry key="productCharacteristicParameterConverter" value-ref="productCharacteristicParameterConverter"/>
                    <entry key="productCharacteristicParameterDescriptionConverter" value-ref="productCharacteristicParameterDescriptionConverter"/>
                </map>
            </property>
        </bean>

        <!--
          ### CrB CREDIT SCORE ADAPTER CONFIGURATION ###

          The class defined here, is the default CrB adapter implementation delivered by CMS, which supports old
          external credit score integration.
          In case operator decides to implement its own CrB credit score adapter then class attribute defined on
          configuration below shall be changed and set with fully qualified name of the class used by operator.

          Note: creditScorerAdapterCrB class must implement interface com.lhs.cms.riskManagement.adapter.ICreditScorerAdapter
        -->
        <bean id="creditScorerAdapterCrB" class="com.lhs.cms.riskManagement.adapter.impl.CrBCreditScorerAdapter" />

      <!-- defect 369936/d birlescv -->
      <!-- This is an internal or external anonymize call generator implementation definition.
           INTERNAL (default) :
         com.lhs.UsageData.bscs_core.UsageDataAnonymizer.
           EXTERNAL :
         Alternatively a customized external anonymize call generator implementation might be specified here which must be accessible on the classpath and implement
         the com.lhs.UsageData.bscs_core.external.UsageDataAnonymizerI Java interface.
           USAGE :
         If the key CDRCallAnonymization is switched to true in Registry_CMS_UsageData.xml, CMS will do the anonymization of called party number
         by invoking the getAnonymizeDigitsI(String pInput) method passing the candidate number as pInput and retrieving the anonymized number
         from this method.
         The default implementation uses the CDRAnonymousString from Registry_CMS_UsageData.xml to anonymize the number from right to left.-->
        <bean id="usageDataAnonymizer" class="com.lhs.UsageData.bscs_core.UsageDataAnonymizer"/>
      <!-- 369936/d -->

      <!--  A usage data anonymizer is required to mask CALLEDPARTY -->
        <bean id="usageDataAnonymizerForCalledParty" class="com.lhs.UsageData.bscs_core.UsageDataAnonymizerForCalledParty"/>

        <!-- END SENDER CONTEXT -->
    </beans>

