apiVersion: v1
kind: ConfigMap
metadata:
  name: eric-bss-eb-ff-database.properties
data:
  database.properties: |
    ##################################################################
    #
    # Standard Data Source Properties
    #
    # These properties are described in JDBC 3.0 specification
    # (see jdbc-3_0-fr-spec.pdf chapter 9.4.1) and in Oracle
    # "JDBC Developer's Guide and Reference" see chapter 8, table 8-1.
    # (available, for example for Oracle 11.2, here:
    # docs.oracle.com/cd/E11882_01/java.112/e16548/urls.htm#JJDBC28267)
    #
    # (Be aware, however, that Oracle does not implement the standard roleName property.)
    ##################################################################

    #
    # Name of the particular database on the server; also
    # known as the "SID" in Oracle terminology.
    # Even if the Oracle documentation states, that this properties is ignored when driverType=oci, serviceName or url is set,
    # this property has to be set properly, since it is necessary for the C# modules.
    #
    databaseName=${SOISRV_DATABASE_NAME}

    #
    # Number of the port where the database server listens for requests.
    # Ignored when url is set.
    #
    portNumber=${SOISRV_DATABASE_PORT}

    #
    # Name of the database server.
    # Ignored when url is set.
    #
    serverName=${SOISRV_DATABASE_SERVER}

    #
    # User
    #
    user=JAVASERVER
    #
    # Users and Passwords for C# modules
    #
    RA.user=RA
    RD.user=RD
    EI.user=EI
    GL.user=GL
    MI.user=MI
    PX.user=PX
    ER.user=ER
    TA.user=TA
    TR.user=TR
    #
    # Network protocol for communicating with the server; for
    # Oracle, this applies only to the oci and thin drivers and defaults
    # to tcp. For a secure connection tcps must be used.
    #
    # (Other possible settings include ipc. See the Oracle Net
    # Services Administrator's Guide for more information.)
    # Ignored when url is set.
    #
    networkProtocol={{.Values.global.databaseTls.protocol | lower}}

    #
    # Name of the underlying data source class (for connection
    # pooling, this is an underlying pooled connection data
    # source class; for distributed transactions, this is an
    # underlying XA data source class)
    #
    dataSourceName=

    #
    # Description of the data source
    #
    description=

    ##################################################################
    #
    # Oracle Extended Data Source Properties
    #
    # These properties are described in Oracle documentation
    # "JDBC Developer's Guide and Reference" see chapter 18, Table 16-8
    # (available, for example, here:
    # docs.oracle.com/cd/E11882_01/java.112/e16548/urls.htm#JJDBC28267
    #
    ##################################################################

    #
    # This designates the Oracle JDBC driver type. Supported values are either
    # "thin" or "oci", while "thin" is the recommended type.
    #
    driverType=thin

    # Specifies the database service name to be used.
    # In case of using RAC installation, this value should be set to the SCAN (Single Client Access Name) name.
    # Ignored when url is set.
    serviceName=${SOISRV_DATABASE_NAME}

    #
    # This is the TNS entry name.
    # It assumes an Oracle client installation with a TNS_ADMIN
    # environment variable that is set appropriately.
    #
    # For the OCI driver:
    # Enable this OracleXADataSource property when using
    # Native XA feature with the OCI driver, to access Oracle
    # pre-8.1.6 databases and higher. If the
    # tnsEntry property is not set when using the Native XA
    # feature, an SQLException with error code ORA-17207 is
    # thrown.
    #
    # If the tnsEntry property is set (which presumes the url property is not set),
    # then any databaseName, serverName, portNumber, and
    # networkProtocol settings are ignored.
    #
    # For the JDBC thin driver:
    # If the property networkProtocol=tcps,
    # it is used to establish a secure connection using TSL.
    #
    {{ if .Values.global.databaseTls.enable }}
    tnsEntry=${SOISRV_TNS_ENTRY}
    {{ end }}

    #
    # This is the URL of the database connect string. Provided as a
    # convenience, it can help you migrate from an older Oracle
    # database. You can use this property in place of the Oracle
    # tnsEntry and the standard portNumber, networkProtocol, serverName,
    # and databaseName properties.
    #
    # If the url property is set, then any tnsEntry, portNumber,
    # networkProtocol, serverName, and databaseName property settings are
    # ignored.
    #
    # Examples:
    # url=jdbc:oracle:thin:scott/tiger@//myhost:1521/myservicename
    # url=jdbc:oracle:thin:@//${SOISRV_DATABASE_SERVER}:${SOISRV_DATABASE_PORT}/${SOISRV_DATABASE_NAME}
    # username and password can be optionally added as well:
    # url=jdbc:oracle:thin:[username/password]@//${SOISRV_DATABASE_SERVER}:${SOISRV_DATABASE_PORT}/${SOISRV_DATABASE_NAME}
    # url=jdbc:oracle:thin:@tnsEntryName


    #
    # Enable this OracleXADataSource property when using
    # the Native XA  feature with the OCI driver, to access Oracle
    # pre-8.1.6 databases and later. If the nativeXA property is enabled, be sure to set the tnsEntry
    # property as well.
    #
    # nativeXA=


    ##################################################################
    # Properties of OracleDataSource class related to the secure
    # connection using a wallet.
    #
    # If the property networkProtocol=tcps a secure connection using
    # TLS is established. In this case the tnsEntry and
    # oracle.net.wallet_location property settings are mandatory.
    ##################################################################

    #
    # This property is used to specify the location of the wallet.
    #
    {{ if .Values.global.databaseTls.enable }}
    oracle.net.wallet_location=${WALLET_LOCATION}
    {{ end }}

    #
    # This property is used to specify cipher suites that will be used by the TLS connection.
    #
    # The recommend cipher suites for Oracle-Release 12.1 are
    # (TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA)
    # and for Oracle-Release 12.2, 18.3 and 19.0 are
    # (TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
    #  TLS_RSA_WITH_AES_128_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA)
    #
    {{ if .Values.global.databaseTls.enable }}
    oracle.net.ssl_cipher_suites={{.Values.global.databaseTls.cipherSuites}}
    {{ end }}

    ##################################################################
    # Properties of OracleDataSource class
    ##################################################################

    #
    # Enables or disables the explicit cache of prepared statements.
    # Note that this is independent of the cache size, set with
    # MaxStatementsLimit.
    #
    explicitCachingEnabled=false

    #
    # Enables or disables the implicit cache of prepared statements.
    # Note that this is independent of the cache size, set with MaxStatementsLimit.
    #
    implicitCachingEnabled=true

    ##########################################################################
    # Properties of OracleDataSource related to implicit connection caching
    ##########################################################################

    #
    # Sets the maximum number of statements that a connection keeps open
    # (which will be used by both implicit and explicit caching).
    # When a cache has this property set, reinitializing the cache or closing the
    # data source automatically closes all cursors beyond the specified MaxStatementsLimit.
    #
    # 0 - means disabled
    #
    # See also: explicitCachingEnabled, implicitCachingEnabled, shouldBindAllParameters
    #
    # This property MUST be set to some not 0 value when shouldBindAllParameters=true
    #
    MaxStatementsLimit=50

    #
    # Sets the minimum number of connections the cache maintains.
    # This guarantees that the cache will not shrink below this minimum limit.
    #
    # NOTE:
    # Setting the MinLimit property does not initialize the cache to contain the
    # minimum number of connections. To do this, use the InitialLimit property.
    #
    MinLimit=20

    #
    # Sets how many connections are created in the cache when it is created or
    # reinitialized. When this property is set to an integer value greater than 0,
    # creating or reinitializing the cache automatically creates the specified
    # number of connections, filling the cache in advance of need.
    #
    InitialLimit=10

    #
    # Sets the maximum number of connection instances the cache can hold. The default
    # value is Integer.MAX_VALUE, meaning that there is no limit enforced by the
    # connection cache, so that the number of connections is limited only by the
    # number of database sessions configured for the database.
    #
    MaxLimit=35

    #
    # Sets the maximum time a physical connection can remain idle in a connection cache.
    # An idle connection is one that is not active and does not have a logical handle
    # associated with it. When InactivityTimeout expires, the underlying physical
    # connection is closed. However, the size of the cache is not allowed to shrink below
    # MinLimit, if it has been set.
    # Default: 0 (no timeout in effect)
    #
    InactivityTimeout=0

    #
    # Sets the maximum time in seconds that a logical connection can remain open.
    # When TimeToLiveTimeout expires, the logical connection is unconditionally closed,
    # the relevant statement handles are canceled, and the underlying physical connection
    # is returned to the cache for reuse.
    # Default value: 0 (no timeout in effect)
    #
    TimeToLiveTimeout=0

    #
    # Specifies cache behavior when a connection is requested and there are already MaxLimit
    # connections active. If ConnectionWaitTimeout is greater than zero, then each connection
    # request waits for the specified number of seconds or until a connection is returned to
    # the cache. If no connection is returned to the cache before the timeout elapses, then
    # the connection request returns null. A value of 0 will never block and will return no connection
    # in case MaxLimit connections are already active. That can result in null pointer exceptions in
    # TOPLink. Therefore a default is set, that is beyond the session timeout.
    # The value is the timeout in seconds.
    #
    ConnectionWaitTimeout=3600

    ##################################################################
    #
    # TopLink properties
    # See TopLink API: docs.oracle.com/cd/B14099_19/web.1012/b15903/index.html
    #
    ##################################################################

    #
    # Set whether to bind all arguments to any SQL statement. (Parameterized SQL)
    # TopLink API: DatabaseLogin.setShouldBindAllParameters
    #
    # When set to "true" then "MaxStatementsLimit"  must be set to some not 0 value;
    # see also "explicitCachingEnabled", "implicitCachingEnabled"
    #
    # When set to "false" then "MaxStatementsLimit", "explicitCachingEnabled", "implicitCachingEnabled"
    # are ignored
    #
    shouldBindAllParameters=true

    #
    # Set whether to bind LIKE predicates in searches.
    # This is not a TOPLink API, but changes the behavior if shouldBindAllParameters is set to true.
    #
    # When set to "true"  LIKE predicates do not use bind variables for SEARCH commands, that are
    #  configurable via XML.
    # When set to "false" LIKE predicates use bind variables, this is the default setting.
    # This switch is useful for such database, where LIKE predicates with binding produce bad execution plan
     # compared to not binding. This can happen due to the bind variable peeking that Oracle performs and depending on the
    # distribution/selectivity of data.
    #
    shouldNotBindLikeInSearch=false

    #
    # TopLink can be configured to use batch writing. This facility allows
    # multiple write operations to be submitted to a database for processing at once.
    # Submitting multiple updates and inserts together, instead of individually,
    # can greatly improve performance in some situations.
    # Since TOPLink 10.1.3 it can be combined with binding parameters as well.
    # TopLink API: DatabaseLogin.setUsesBatchWriting
    #
    usesBatchWriting=false

    ##################################################################
    #
    # Logging on JDBC driver level
    #
    ##################################################################

    #
    # The following parameter controls logging of database activity on the
    # JDBC driver level. When this parameter is set to 'on' then the
    # whole communication stream between database and server will be written
    # in the file specified in the 'jdbcdriver.logfile'.
    #
    # Prerequisite: debug version of the Oracle JDBC driver (e.g. ojdbc8_g-<version>.jar)
    # should be used instead of production version (e.g. ojdbc8-<version>.jar).
    #
    # For configuring the log level, additional settings must be provided in the
    # 'logging.properties' file. Following loggers are used by the JDBC driver
    # and can be configured separately in this file:
    #
    # oracle.jdbc            (almost all Oracle JDBC messages)
    # oracle.jdbc.driver     (the core driver code)
    # oracle.jdbc.pool       (DataSources and Connection pooling)
    # oracle.jdbc.rowset     (RowSets)
    # oracle.jdbc.xa         (distributed transaction support)
    # oracle.sql             (complex SQL data types)
    #
    # Per default the log will be contained in the file specified below. Additionally
    # further handlers could be added in the 'logging.properties' file.
    #
    # Use carefully since it produces a lot of output, that affects overall
    # system performance.
    #
    # Possible values: on/off
    jdbcdriver.log=off

    #
    # Name of the JDBC log file. Must be specified if JDBC log is enabled. If not set, the jdbcdriver.log setting is ignored.
    #
    jdbcdriver.logfile=jdbcdriver.log

    # The following property allows overriding the program value for the Oracle session, that is usually set to the server name by the BSCS Java servers.
    #v$session.program=${could be a fix value or a environment variable}
