apiVersion: v1
kind: ConfigMap
metadata:
  name: eric-bss-eb-evh-svc-conf
data:
  svc.conf: |
    # This configuration file sets up the behavior of the TAO ORB used by the
    # C++ SOI servers. By default, all servers use the same file.
    # If it is necessary to have different configurations, create a copy of the
    # file, make your changes and start server with a corresponding
    # -ORBSvcConf option.

    #static UTF16_BOM_Factory "-forceBE 1"

    #
    # What we saw happening was that with a large reply TAO could not write the
    # entire reply at once without filling up the TCP buffers. Once the buffers
    # are full TAO consults with the Flushing Strategy to determine how to
    # respond.
    #
    # In the default setting, the Flushing Strategy attempts to schedule output
    # via the reactor. This causes a crash because the default Flushing Strategy
    # expects a non-null reactor pointer. Since "thread-per-connection" does not
    # use the reactor for I/O on established sockets, the reactor pointer is null.
    #
    # By using the "blocking" Flushing Strategy, as indicated above, TAO will
    # block on the socket becoming ready for output. This is the proper thing to
    # do in the "thread-per-connection" model, since the current thread has been
    # dedicated to servicing the current connection.
    #
    # The three options for the Client_Strategy_Factory are used to prevent the
    # client-side ORB from using the reactor. The Receive-Wait (rw) wait strategy
    # is the most popular and probably the easiest mechanism to prevent nested
    # upcalls. Specifying an "rw" wait strategy causes threads waiting for replies
    # to not enter the normal event loop and instead block for their pending reply.
    # This keeps the ORB from dispatching incoming requests in "client" threads.
    #
    # The reason for using exclusive Transport Multiplexing is that another request
    # is not allowed to be sent over a connection if that connection is already
    # being used by another thread that is waiting for a reply. The blocking
    # Connect and Flushing Strategies are required because the event handler for a
    # connection used to send a request is not registered with the ORB's Reactor.

    # This is the default setting. It is explained above.
    static Server_Strategy_Factory "-ORBConcurrency thread-per-connection"
    static Resource_Factory "-ORBFlushingStrategy blocking"
    static Client_Strategy_Factory "-ORBWaitStrategy rw -ORBTransportMuxStrategy exclusive -ORBConnectStrategy blocked"

    # If the reactor pattern with a thread-pool concurrency model should be used,
    # the default setting above must be commented out. Instead the following should be defined:
    #static Resource_Factory "-ORBFlushingStrategy blocking"
    #static Client_Strategy_Factory "-ORBWaitStrategy rw -ORBConnectStrategy blocked"
    # To use this option, requires that a thread-pool size greater than 0.
