apiVersion: v1
kind: ConfigMap
metadata:
  name: eric-bss-eb-evh-logging.properties
data:
  logging.properties: |
    ############################################################
    #      Default Logging Configuration File
    #
    # You can use a different file by specifying a filename
    # with the java.util.logging.config.file system property.
    # For example java -Djava.util.logging.config.file=myfile
    ############################################################

    ############################################################
    #      Global properties
    ############################################################

    # "handlers" specifies a comma separated list of log Handler
    # classes.  These handlers will be installed during VM startup.
    # Note that these classes must be on the system classpath.
    # By default we only configure a ConsoleHandler, which will only
    # show messages at the INFO and above levels.

    # To also add the FileHandler, use the following line instead.
    handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler

    # Default global logging level.
    # This specifies which kinds of events are logged across
    # all loggers.  For any given facility this global level
    # can be overriden by a facility specific level
    # Note that the ConsoleHandler also has a separate level
    # setting to limit messages printed to the console.
    .level=WARNING

    ############################################################
    # Handler specific properties.
    # Describes specific configuration info for Handlers.
    ############################################################

    # java.util.logging.FileHandler.level specifies the default level for the Handler (defaults to Level.ALL).
    # java.util.logging.FileHandler.filter specifies the name of a Filter class to use (defaults to no Filter).
    # java.util.logging.FileHandler.formatter specifies the name of a Formatter class to use (defaults to java.util.logging.XMLFormatter)
    # java.util.logging.FileHandler.encoding the name of the character set encoding to use (defaults to the default platform encoding).
    # java.util.logging.FileHandler.limit specifies an approximate maximum amount to write (in bytes) to any one file. If this is zero, then there is no limit. (Defaults to no limit).
    # java.util.logging.FileHandler.count specifies how many output files to cycle through (defaults to 1).
    # java.util.logging.FileHandler.pattern specifies a pattern for generating the output file name. See below for details. (Defaults to "%h/java%u.log").
    # java.util.logging.FileHandler.append specifies whether the FileHandler should append onto any existing files (defaults to false).

    # A pattern consists of a string that includes the following special components that will be replaced at runtime:
    # "/" the local pathname separator
    # "%t" the system temporary directory
    # "%h" the value of the "user.home" system property
    # "%g" the generation number to distinguish rotated logs
    # "%u" a unique number to resolve conflicts
    # "%%" translates to a single percent sign "%"

    # default file output is in log/ subdirectory.
    java.util.logging.FileHandler.pattern = %t/EVH.{HOSTNAME}.system_%u_%g.log
    java.util.logging.FileHandler.limit = 1000000
    java.util.logging.FileHandler.count = 5
    java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter

    # Limit the message that are printed on the console to INFO and above.
    java.util.logging.ConsoleHandler.level = INFO
    java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter


    ############################################################
    # Settings for SystemLog (used in all Java components)
    ############################################################
    SystemLog.level = INFO
