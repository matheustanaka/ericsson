{{- range $index, $prihDeployment := .Values.prihDeployments }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ $.Values.metadataName }}-{{ $prihDeployment.name | lower}}"
  labels:
    app: "{{ $.Values.metadataName }}-{{ $prihDeployment.name | lower}}"
    chart: {{ template "eric-bss-eb-prih.chart" $ }}
    {{- include "eric-bss-eb-prih.kubernetesIoInfo" $ | nindent 4 }}
    heritage: "{{ $.Release.Service }}"
  annotations:
  {{- include "eric-bss-eb-prih.productInfo" $ | indent 4 }}
spec:
  replicas: {{ $prihDeployment.replicaCount | default 1 }}
  selector:
    matchLabels:
      app:  "eric-bss-eb-{{ $prihDeployment.name | lower}}"
      app.kubernetes.io/instance: {{ $.Release.Name }}
  template:
    metadata:
      labels:
        app: "eric-bss-eb-{{ $prihDeployment.name | lower}}"
        {{- include "eric-bss-eb-prih.kubernetesIoInfo" $ | nindent 8 }}
        eric-bss-eb-network-database-client: "true"
        eric-bss-eb-network-data-client: "true"
        eric-bss-eb-network-lem-client: "true"
        eric-bss-eb-network-vault-client: 'true'
      annotations:
      {{- include "eric-bss-eb-prih.productInfo" $ | indent 8 }}
    spec:
      securityContext:
        {{- include "eric-bss-eb-prih.checkPodUserLoginData" $ | nindent 8 }}
      shareProcessNamespace: {{ $.Values.global.shareProcessNamespace }}
      {{- if $.Values.global.imageCredentials.pullSecret }}
      imagePullSecrets:
        - name: {{ $.Values.global.imageCredentials.pullSecret }}
      {{- end }}
      initContainers:
        - name: init-wait-for-data-{{ $prihDeployment.name | lower}}
          # containerKey identifies the section inside .Values.images and .Values.imageCredentials to be used here
          {{ $templDict := dict "Values" $.Values "containerKey" "init-wait-for-data" }}
          image: "{{ template "eric-bss-eb-prih.registryUrl" $templDict }}/{{ template "eric-bss-eb-prih.repoPath" $templDict }}{{ index $.Values "images" $templDict.containerKey "name" }}:{{ index $.Values "images" $templDict.containerKey "tag" }}"
          imagePullPolicy: {{ template "eric-bss-eb-prih.pullPolicy" $templDict }}
          command: ["/bin/bash"]
          args: ["-c", "./waitForCondition.sh dmh {{ $.Values.global.conditionCheckInterval }} "]
          env:
          {{ if $.Values.global.dataHighAvailability.enable }}
          - name: DATA_CONNECT_NAME
            value: "{{ $.Values.global.dataServerName }}"
          - name: DATA_CONNECT_ADDRESS
            value: "T:eric-bss-eb-data-service:{{ $.Values.global.dataClusterPort }},T:eric-bss-eb-data1-service:{{ $.Values.global.dataClusterPort }}"
          - name: DATA_CONNECT_MODE
            value: "0"
          {{ else }}
          - name: DATA_SERVER_ADDRESS
            value: "T:eric-bss-eb-data-service:{{ $.Values.global.dataClusterPort }}"
          {{ end }}
          - name: TZ
            value: "{{ $.Values.global.timezone }}"
          - name: BSCS_LOG_FULL
            value: "/log/{{ $prihDeployment.name }}"
          volumeMounts:
          {{ if $.Values.global.securityTls.enable }}
          - name: tls-volume
            mountPath: "/tls/connect"
            readOnly: true
          {{ end }}
          - mountPath: /log
            name: logs-volume
        - name: init-wait-for-xrefs-{{ $prihDeployment.name | lower}}
          # containerKey identifies the section inside .Values.images and .Values.imageCredentials to be used here
          {{ $templDict := dict "Values" $.Values "containerKey" "init-wait-for-xrefs" }}
          image: "{{ template "eric-bss-eb-prih.registryUrl" $templDict }}/{{ template "eric-bss-eb-prih.repoPath" $templDict }}{{ index $.Values "images" $templDict.containerKey "name" }}:{{ index $.Values "images" $templDict.containerKey "tag" }}"
          imagePullPolicy: {{ template "eric-bss-eb-prih.pullPolicy" $templDict }}
          command: ["/bin/bash"]
          args: ["-c", "$WAIT_FOR_CONDITION -U && $WAIT_FOR_CONDITION -S && $WAIT_FOR_CONDITION -G "]
          env:
          - name: TZ
            value: "{{ $.Values.global.timezone }}"
          - name: BSCS_LOG_FULL
            value: "/log/{{ $prihDeployment.name }}"
          - name: WAIT_FOR_CONDITION
            value: "./waitForCondition.sh checkXref {{ $.Values.global.conditionCheckInterval }}"
          volumeMounts:
          - mountPath: /workdir/XREF
            name: xref-volume
          - mountPath: /log
            name: logs-volume
      {{ if index $.Values "images" "prih-init-customized" "name" }}
        - name: prih-init-customized-{{ $prihDeployment.name | lower}}
          # containerKey identifies the section inside .Values.images and .Values.imageCredentials to be used here
          {{ $templDict := dict "Values" $.Values "containerKey" "prih-init-customized" }}
          image: "{{ template "eric-bss-eb-prih.registryUrl" $templDict }}/{{ template "eric-bss-eb-prih.repoPath" $templDict }}{{ index $.Values "images" $templDict.containerKey "name" }}:{{ index $.Values "images" $templDict.containerKey "tag" }}"
          imagePullPolicy: {{ template "eric-bss-eb-prih.pullPolicy" $templDict }}
          command: ["/bin/sh"]
          args: ["-c","if [ -f {{ index $.Values "images" $templDict.containerKey "directory" }}/libqos.so ] ; then cp {{ index $.Values "images" $templDict.containerKey "directory" }}/libqos.so /prih-customized-libs/ ; fi "]
          volumeMounts:
          - mountPath: /prih-customized-libs
            name: prih-customized-libs-volume
      {{ end }}
      {{- if $.Values.global.rbac.sa_roles_create }}
      serviceAccountName: {{ $.Chart.Name }}-sa
      {{- end }}
      containers:
        # rdh -udmap container
        - name: eric-bss-eb-rdh-udmap
          # containerKey identifies the section inside .Values.images and .Values.imageCredentials to be used here
          {{ $templDict := dict "Values" $.Values "containerKey" "rdh-udmap" }}
          image: "{{ template "eric-bss-eb-prih.registryUrl" $templDict }}/{{ template "eric-bss-eb-prih.repoPath" $templDict }}{{ index $.Values "images" $templDict.containerKey "name" }}:{{ index $.Values "images" $templDict.containerKey "tag" }}"
          imagePullPolicy: {{ template "eric-bss-eb-prih.pullPolicy" $templDict }}
          {{ if ne (int $prihDeployment.replicaCount) 0 }}
          resources:
            limits:
              memory: "{{ $prihDeployment.rdhUdmap.resources.limits.memory}}"
              cpu: "{{ $prihDeployment.rdhUdmap.resources.limits.cpu}}"
            requests:
              memory: "{{ $prihDeployment.rdhUdmap.resources.requests.memory}}"
              cpu: "{{ $prihDeployment.rdhUdmap.resources.requests.cpu}}"
          {{ end }}
          env:
          # store the container name in BSCS_LOG_POSTFIX to be able to add it to the rdh log file name
          - name: BSCS_LOG_POSTFIX
            value: "rdh-udmap"
          - name: K8S_ENV
            value: "true"
          {{ if $.Values.global.databaseTls.enable }}
          - name: ORA_SEC_WLT
            value: "/oratns/secret"
          {{ end }}
          - name: DXL_CONTINUE_AFTER_CORRUPT
            value: "{{ $.Values.global.tracingAndLogging.dxlContinueAfterCorrupt }}"
          {{ if $.Values.global.dataHighAvailability.enable }}
          - name: DATA_CONNECT_NAME
            value: "{{ $.Values.global.dataServerName }}"
          - name: DATA_CONNECT_ADDRESS
            value: "T:eric-bss-eb-data-service:{{ $.Values.global.dataClusterPort }},T:eric-bss-eb-data1-service:{{ $.Values.global.dataClusterPort }}"
          - name: DATA_CONNECT_MODE
            value: "0"
          {{ else }}
          - name: DATA_SERVER_ADDRESS
            value: "T:eric-bss-eb-data-service:{{ $.Values.global.dataClusterPort }}"
          {{ end }}
          - name: DATABASE_SERVER_NAME
            value: "{{ $.Values.global.databaseServerName }}"
          - name: DATABASE_SERVER_PORT
            value: "{{ $.Values.global.databaseServerPort }}"
          - name: DATABASE_SERVER_NAME_RTX
            value: "{{ $.Values.global.rtxDatabaseServerName }}"
          - name: DATABASE_SERVER_PORT_RTX
            value: "{{ $.Values.global.rtxDatabaseServerPort }}"
          # using SHM environment different from that of bare-metal installation
          # due to different SHM access rights for applications running in pods
          # and those from bare-metal installation
          {{ if ne (int $prihDeployment.replicaCount) 0 }}
          - name: SHM_MAX_ENVIRONMENTS
            value: "{{ $prihDeployment.rdhUdmap.envVariables.shmMaxEnvironments }}"
          - name: SHM_MAX_SECTORS
            value: "{{ $prihDeployment.rdhUdmap.envVariables.shmMaxSectors }}"
          - name: SHM_MAX_SEGMENTS
            value: "{{ $prihDeployment.rdhUdmap.envVariables.shmMaxSegments }}"
          - name: SHM_MIN_SEGMENT_SIZE
            value: "{{ $prihDeployment.rdhUdmap.envVariables.shmMinSegmentSize }}"
          {{ end }}
          - name: TZ
            value: "{{ $.Values.global.timezone }}"
          {{ if $.Values.global.securityTls.enable }}
          - name: DATA_SSL_CONNECT
            value: "1"
          - name: DATA_CIPHER_LIST
            value: "{{ $.Values.global.securityTls.cipherList }}"
          {{ end }}
          {{ if ne (int $prihDeployment.replicaCount) 0 }}
          {{ if $prihDeployment.rdhUdmap.tracingAndLogging }}
          {{ if $prihDeployment.rdhUdmap.tracingAndLogging.dtaTracefile }}
          - name: DTA_TRACEFILE
            value: "{{ $prihDeployment.rdhUdmap.tracingAndLogging.dtaTracefile }}"
          {{ end }}
          {{ if $prihDeployment.rdhUdmap.tracingAndLogging.dxlTracefile }}
          - name: DXL_TRACEFILE
            value: "{{ $prihDeployment.rdhUdmap.tracingAndLogging.dxlTracefile }}"
          {{ end }}
          {{ if $prihDeployment.rdhUdmap.tracingAndLogging.udrTracefile }}
          - name: UDR_TRACEFILE
            value: "{{ $prihDeployment.rdhUdmap.tracingAndLogging.udrTracefile }}"
          {{ end }}
          {{ end }}
          {{ end }}
          - name: DATA_RETRY_TIME
            value: "{{ $.Values.dataRetry.dataRetryTime }}"
          - name: DATA_RETRY_TIME_MAX
            value: "{{ $.Values.dataRetry.dataRetryTimeMax }}"
          - name:  RDH_RM_SHM_AFTER_TERMINATION
            value: "true"
          # Configure rdh start options
          {{ if ne (int $prihDeployment.replicaCount) 0 }}
          - name: APPLICATION_CLASS_CONTEXT
            value: "{{ $prihDeployment.rdhUdmap.applicationClassContext }}"
          - name: TRACE_LEVEL
            value: "{{ $prihDeployment.rdhUdmap.traceLevel | default 1 }}"
          - name: USE_SLAVE
            value: "{{ $prihDeployment.rdhUdmap.useSlave }}"
          - name: DATA_TIMEOUT
            value: "{{ $prihDeployment.rdhUdmap.dataTimeout  }}"
          - name: SEGMENTATION
            value: "{{ $prihDeployment.rdhUdmap.segmentationParameters }}"
          - name: OPTIONAL_PARAMETERS
            value: "{{ $prihDeployment.rdhUdmap.optionalParameters }}"
          {{ end }}
          {{ if not $.Values.global.secretManager.enable }}
          - name: NO_SECRET_MANAGER
            value: "true"
          {{ end }}
          #command: ["tail"]
          #args: ["-f", "/dev/null"]
          command: ["/bin/bash"]
          args: ["-c", "ulimit -c unlimited && mkdir -p {{ $.Values.global.coredumpDirectory }} && \
                        ./rdh -udmap $APPLICATION_CLASS_CONTEXT -t $TRACE_LEVEL $USE_SLAVE $DATA_TIMEOUT $SEGMENTATION $OPTIONAL_PARAMETERS"]
          volumeMounts:
          {{ if $.Values.global.securityTls.enable }}
          - name: tls-volume
            mountPath: "/tls/connect"
            readOnly: true
          {{ end }}
          {{ if $.Values.global.databaseTls.enable }}
          - name: wallet-volume
            mountPath: /oratns/secret
          {{ end }}
          - mountPath: /workdir/XREF
            name: xref-volume
          - mountPath: /workdir/PWDMGR_SECURITY
            name: pwdmgr-security-volume
          - mountPath: /log
            name: logs-volume
          - name: coredump-volume
            mountPath: "{{ $.Values.global.coredumpDirectory }}"
          - name: tnsnames-ora-volume
            mountPath: /oratns/tnsnames.ora
            subPath: tnsnames.ora
          - name: sqlnet-ora-volume
            mountPath: /oratns/sqlnet.ora
            subPath: sqlnet.ora
          - mountPath: /dev/shm
            name: dshm
          {{ if and ($.Values.global.secretManager.enable) ($.Values.global.secretManager.vault.caSecretName) }}
          - name: secretmanager-tls-volume
            mountPath: "/tls/secretManager/vault"
            readOnly: true
          {{ end }}
          - name: vault-clientcfg-xml-volume
            mountPath: /ericssonbilling/resource/vault-clientcfg/vault-clientcfg.xml
            subPath: vault-clientcfg.xml
          - name: vault-clientcfg-dtd-volume
            mountPath: /ericssonbilling/resource/vault-clientcfg/vault-clientcfg.dtd
            subPath: vault-clientcfg.dtd
        # rdh -prih container
        - name: eric-bss-eb-rdh-prih
          # containerKey identifies the section inside .Values.images and .Values.imageCredentials to be used here
          {{ $templDict := dict "Values" $.Values "containerKey" "rdh-prih" }}
          image: "{{ template "eric-bss-eb-prih.registryUrl" $templDict }}/{{ template "eric-bss-eb-prih.repoPath" $templDict }}{{ index $.Values "images" $templDict.containerKey "name" }}:{{ index $.Values "images" $templDict.containerKey "tag" }}"
          imagePullPolicy: {{ template "eric-bss-eb-prih.pullPolicy" $templDict }}
          {{ if ne (int $prihDeployment.replicaCount) 0 }}
          resources:
            limits:
              memory: "{{ $prihDeployment.rdhForPrih.resources.limits.memory}}"
              cpu: "{{ $prihDeployment.rdhForPrih.resources.limits.cpu}}"
            requests:
              memory: "{{ $prihDeployment.rdhForPrih.resources.requests.memory}}"
              cpu: "{{ $prihDeployment.rdhForPrih.resources.requests.cpu}}"
          {{ end }}
          env:
          # store the container name in BSCS_LOG_POSTFIX to be able to add it to the rdh log file name
          - name: BSCS_LOG_POSTFIX
            value: "rdh-prih"
          - name: K8S_ENV
            value: "true"
          {{ if $.Values.global.databaseTls.enable }}
          - name: ORA_SEC_WLT
            value: "/oratns/secret"
          {{ end }}
          - name: DXL_CONTINUE_AFTER_CORRUPT
            value: "{{ $.Values.global.tracingAndLogging.dxlContinueAfterCorrupt }}"
          {{ if $.Values.global.dataHighAvailability.enable }}
          - name: DATA_CONNECT_NAME
            value: "{{ $.Values.global.dataServerName }}"
          - name: DATA_CONNECT_ADDRESS
            value: "T:eric-bss-eb-data-service:{{ $.Values.global.dataClusterPort }},T:eric-bss-eb-data1-service:{{ $.Values.global.dataClusterPort }}"
          - name: DATA_CONNECT_MODE
            value: "0"
          {{ else }}
          - name: DATA_SERVER_ADDRESS
            value: "T:eric-bss-eb-data-service:{{ $.Values.global.dataClusterPort }}"
          {{ end }}
          - name: DATABASE_SERVER_NAME
            value: "{{ $.Values.global.databaseServerName }}"
          - name: DATABASE_SERVER_PORT
            value: "{{ $.Values.global.databaseServerPort }}"
          - name: DATABASE_SERVER_NAME_RTX
            value: "{{ $.Values.global.rtxDatabaseServerName }}"
          - name: DATABASE_SERVER_PORT_RTX
            value: "{{ $.Values.global.rtxDatabaseServerPort }}"
          # using SHM environment different from that of bare-metal installation
          # due to different SHM access rights for applications running in pods
          # and those from bare-metal installation
          {{ if ne (int $prihDeployment.replicaCount) 0 }}
          - name: SHM_MAX_ENVIRONMENTS
            value: "{{ $prihDeployment.rdhForPrih.envVariables.shmMaxEnvironments }}"
          - name: SHM_MAX_SECTORS
            value: "{{ $prihDeployment.rdhForPrih.envVariables.shmMaxSectors }}"
          - name: SHM_MAX_SEGMENTS
            value: "{{ $prihDeployment.rdhForPrih.envVariables.shmMaxSegments }}"
          - name: SHM_MIN_SEGMENT_SIZE
            value: "{{ $prihDeployment.rdhForPrih.envVariables.shmMinSegmentSize }}"
          {{ end }}
          - name: TZ
            value: "{{ $.Values.global.timezone }}"
          {{ if $.Values.global.securityTls.enable }}
          - name: DATA_SSL_CONNECT
            value: "1"
          - name: DATA_CIPHER_LIST
            value: "{{ $.Values.global.securityTls.cipherList }}"
          {{ end }}
          {{ if ne (int $prihDeployment.replicaCount) 0 }}
          {{ if $prihDeployment.rdhForPrih.tracingAndLogging }}
          {{ if $prihDeployment.rdhForPrih.tracingAndLogging.bscsErrorTimestamp }}
          - name: BSCS_ERROR_TIMESTAMP
            value: "{{ $prihDeployment.rdhForPrih.tracingAndLogging.bscsErrorTimestamp }}"
          {{ end }}
          {{ if $prihDeployment.rdhForPrih.tracingAndLogging.dtaTracefile }}
          - name: DTA_TRACEFILE
            value: "{{ $prihDeployment.rdhForPrih.tracingAndLogging.dtaTracefile }}"
          {{ end }}
          {{ if $prihDeployment.rdhForPrih.tracingAndLogging.dxlTracefile }}
          - name: DXL_TRACEFILE
            value: "{{ $prihDeployment.rdhForPrih.tracingAndLogging.dxlTracefile }}"
          {{ end }}
          {{ if $prihDeployment.rdhForPrih.tracingAndLogging.udrTracefile }}
          - name: UDR_TRACEFILE
            value: "{{ $prihDeployment.rdhForPrih.tracingAndLogging.udrTracefile }}"
          {{ end }}
          {{ end }}
          {{ end }}
          - name: DATA_RETRY_TIME
            value: "{{ $.Values.dataRetry.dataRetryTime }}"
          - name: DATA_RETRY_TIME_MAX
            value: "{{ $.Values.dataRetry.dataRetryTimeMax }}"
          - name:  RDH_RM_SHM_AFTER_TERMINATION
            value: "true"
          # Configure rdh start options
          {{ if ne (int $prihDeployment.replicaCount) 0 }}
          - name: APPLICATION_CLASS_CONTEXT
            value: "{{ $prihDeployment.rdhForPrih.applicationClassContext }}"
          - name: TRACE_LEVEL
            value: "{{ $prihDeployment.rdhForPrih.traceLevel | default 1 }}"
          - name: USE_SLAVE
            value: "{{ $prihDeployment.rdhForPrih.useSlave }}"
          - name: DATA_TIMEOUT
            value: "{{ $prihDeployment.rdhForPrih.dataTimeout  }}"
          - name: SEGMENTATION
            value: "{{ $prihDeployment.rdhForPrih.segmentationParameters }}"
          - name: OPTIONAL_PARAMETERS
            value: "{{ $prihDeployment.rdhForPrih.optionalParameters }}"
          {{ end }}
          {{ if not $.Values.global.secretManager.enable }}
          - name: NO_SECRET_MANAGER
            value: "true"
          {{ end }}
          #command: ["tail"]
          #args: ["-f", "/dev/null"]
          command: ["/bin/bash"]
          args: ["-c", "ulimit -c unlimited && mkdir -p {{ $.Values.global.coredumpDirectory }} && \
                        ./rdh -prih $APPLICATION_CLASS_CONTEXT -t $TRACE_LEVEL $USE_SLAVE $DATA_TIMEOUT $SEGMENTATION $OPTIONAL_PARAMETERS"]
          volumeMounts:
          {{ if $.Values.global.securityTls.enable }}
          - name: tls-volume
            mountPath: "/tls/connect"
            readOnly: true
          {{ end }}
          {{ if $.Values.global.databaseTls.enable }}
          - name: wallet-volume
            mountPath: /oratns/secret
          {{ end }}
          - mountPath: /workdir/XREF
            name: xref-volume
          - mountPath: /workdir/PWDMGR_SECURITY
            name: pwdmgr-security-volume
          - mountPath: /log
            name: logs-volume
          - name: coredump-volume
            mountPath: "{{ $.Values.global.coredumpDirectory }}"
          - name: tnsnames-ora-volume
            mountPath: /oratns/tnsnames.ora
            subPath: tnsnames.ora
          - name: sqlnet-ora-volume
            mountPath: /oratns/sqlnet.ora
            subPath: sqlnet.ora
          - name: comlock-volume
            mountPath: /workdir/CONF/comlock/ComLock.cfg
            subPath: ComLock.cfg
          - mountPath: /dev/shm
            name: dshm
          {{ if and ($.Values.global.secretManager.enable) ($.Values.global.secretManager.vault.caSecretName) }}
          - name: secretmanager-tls-volume
            mountPath: "/tls/secretManager/vault"
            readOnly: true
          {{ end }}
          - name: vault-clientcfg-xml-volume
            mountPath: /ericssonbilling/resource/vault-clientcfg/vault-clientcfg.xml
            subPath: vault-clientcfg.xml
          - name: vault-clientcfg-dtd-volume
            mountPath: /ericssonbilling/resource/vault-clientcfg/vault-clientcfg.dtd
            subPath: vault-clientcfg.dtd
        # prih container
        {{- range $prihIndex, $prih := $prihDeployment.prihContainer }}
        - name: "{{ $prih.name | lower}}"
          # containerKey identifies the section inside .Values.images and .Values.imageCredentials to be used here
          {{ $templDict := dict "Values" $.Values "containerKey" "prih" }}
          image: "{{ template "eric-bss-eb-prih.registryUrl" $templDict }}/{{ template "eric-bss-eb-prih.repoPath" $templDict }}{{ index $.Values "images" $templDict.containerKey "name" }}:{{ index $.Values "images" $templDict.containerKey "tag" }}"
          imagePullPolicy: {{ template "eric-bss-eb-prih.pullPolicy" $templDict }}
          resources:
            limits:
              memory: "{{ $prih.prihResources.limits.memory}}"
              cpu: "{{ $prih.prihResources.limits.cpu}}"
            requests:
              memory: "{{ $prih.prihResources.requests.memory}}"
              cpu: "{{ $prih.prihResources.requests.cpu}}"
          env:
          # store the container name in BSCS_LOG_POSTFIX to be able to add it to the prih log file name
          - name: BSCS_LOG_POSTFIX
            value: "{{ $prih.name | lower}}"
          # using SHM environment created by daemonset RDHs
          # different from that of bare-metal installation
          # due to different SHM access rights for applications running in pods
          # and those from bare-metal installation
          - name: K8S_ENV
            value: "true"
          - name: NLS_LANG
            value: "{{ $.Values.global.nlsLang }}"
          {{ if $.Values.global.dataHighAvailability.enable }}
          - name: DATA_CONNECT_NAME
            value: "{{ $.Values.global.dataServerName }}"
          - name: DATA_CONNECT_ADDRESS
            value: "T:eric-bss-eb-data-service:{{ $.Values.global.dataClusterPort }},T:eric-bss-eb-data1-service:{{ $.Values.global.dataClusterPort }}"
          - name: DATA_CONNECT_MODE
            value: "0"
          {{ else }}
          - name: DATA_SERVER_ADDRESS
            value: "T:eric-bss-eb-data-service:{{ $.Values.global.dataClusterPort }}"
          {{ end }}
          - name: DATABASE_SERVER_NAME
            value: "{{ $.Values.global.databaseServerName }}"
          - name: DATABASE_SERVER_PORT
            value: "{{ $.Values.global.databaseServerPort }}"
          - name: TZ
            value: "{{ $.Values.global.timezone }}"
          - name: MP_LOG_SIZE
            value: "{{ $.Values.global.tracingAndLogging.mpLogParameters.mpLogSize }}"
          - name: MP_LOG_INTERVAL
            value: "{{ $.Values.global.tracingAndLogging.mpLogParameters.mpLogInterval }}"
          {{ if $.Values.global.databaseTls.enable }}
          - name: ORA_SEC_WLT
            value: "/oratns/secret"
          {{ end }}
          - name: DXL_CONTINUE_AFTER_CORRUPT
            value: "{{ $.Values.global.tracingAndLogging.dxlContinueAfterCorrupt }}"
          {{ if $.Values.global.securityTls.enable }}
          - name: DATA_SSL_CONNECT
            value: "1"
          - name: DATA_CIPHER_LIST
            value: "{{ $.Values.global.securityTls.cipherList }}"
          {{ end }}
          {{ if $prih.tracingAndLogging }}
          {{ if $prih.tracingAndLogging.bscsErrorTimestamp }}
          - name: BSCS_ERROR_TIMESTAMP
            value: "{{ $prih.tracingAndLogging.bscsErrorTimestamp }}"
          {{ end }}
          {{ if $prih.tracingAndLogging.dxlTracefile }}
          - name: DXL_TRACEFILE
            value: "{{ $prih.tracingAndLogging.dxlTracefile }}"
          {{ end }}
          {{ if $prih.tracingAndLogging.udrTracefile }}
          - name: UDR_TRACEFILE
            value: "{{ $prih.tracingAndLogging.udrTracefile }}"
          {{ end }}
          {{ if $prih.tracingAndLogging.dtaTracefile }}
          - name: DTA_TRACEFILE
            value: "{{ $prih.tracingAndLogging.dtaTracefile }}"
          {{ end }}
          {{ end }}
          - name: DATA_RETRY_TIME
            value: "{{ $.Values.dataRetry.dataRetryTime }}"
          - name: DATA_RETRY_TIME_MAX
            value: "{{ $.Values.dataRetry.dataRetryTimeMax }}"
          - name: OPTIONS
            value: "{{ $prih.startParameters }}"
          {{ if not $.Values.global.secretManager.enable }}
          - name: NO_SECRET_MANAGER
            value: "true"
          {{ end }}
          command: ["/bin/bash"]
          args: ["-c", "ulimit -c unlimited && mkdir -p {{ $.Values.global.coredumpDirectory }} && \
                        ./waitForShm.sh -prih -sleep {{ $.Values.global.conditionCheckInterval }} && exec ./prih ${OPTIONS}"]
          volumeMounts:
          {{ if $.Values.global.securityTls.enable }}
          - name: tls-volume
            mountPath: "/tls/connect"
            readOnly: true
          {{ end }}
          - name: xref-volume
            mountPath: /workdir/XREF
          - name: pwdmgr-security-volume
            mountPath: /workdir/PWDMGR_SECURITY
          - name: logs-volume
            mountPath: /log
          - name: coredump-volume
            mountPath: "{{ $.Values.global.coredumpDirectory }}"
          - name: tnsnames-ora-volume
            mountPath: /oratns/tnsnames.ora
            subPath: tnsnames.ora
          - name: sqlnet-ora-volume
            mountPath: /oratns/sqlnet.ora
            subPath: sqlnet.ora
          - name: prih-ini-volume
            mountPath: /workdir/CONF/prih.ini
            subPath: prih.ini
          - mountPath: /prih-customized-libs
            name: prih-customized-libs-volume
          - name: comlock-volume
            mountPath: /workdir/CONF/comlock/ComLock.cfg
            subPath: ComLock.cfg
          {{ if $.Values.global.databaseTls.enable }}
          - name: wallet-volume
            mountPath: /oratns/secret
          {{ end }}
          - mountPath: /dev/shm
            name: dshm
          {{ if and ($.Values.global.secretManager.enable) ($.Values.global.secretManager.vault.caSecretName) }}
          - name: secretmanager-tls-volume
            mountPath: "/tls/secretManager/vault"
            readOnly: true
          {{ end }}
          - name: vault-clientcfg-xml-volume
            mountPath: /ericssonbilling/resource/vault-clientcfg/vault-clientcfg.xml
            subPath: vault-clientcfg.xml
          - name: vault-clientcfg-dtd-volume
            mountPath: /ericssonbilling/resource/vault-clientcfg/vault-clientcfg.dtd
            subPath: vault-clientcfg.dtd
        {{- end}}
      {{- if $prihDeployment.nodeSelector }}
      nodeSelector: {{ toYaml $prihDeployment.nodeSelector | nindent 8 }}
      # else if: use local helm chart setting, if defined
      {{- else if $.Values.nodeSelector }}
      nodeSelector: {{ toYaml $.Values.nodeSelector | nindent 8 }}
      # else if: use global setting, if defined
      {{- else if $.Values.global.nodeSelector }}
      nodeSelector: {{ toYaml $.Values.global.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if $.Values.affinity }}
      affinity: {{ toYaml $.Values.affinity | nindent 8 }}
      {{- else if $.Values.global.affinity }}
      affinity: {{ toYaml $.Values.global.affinity | nindent 8 }}
      {{- end }}
      restartPolicy: "{{ $.Values.restartPolicy }}"
      volumes:
      {{ if $.Values.global.securityTls.enable }}
      - name: tls-volume
        secret:
          secretName: "{{ $.Values.global.securityTls.clientSecretName }}"
          items:
          - key: {{ $.Values.global.securityTls.trustedCertificateKey }}
            path: certificate.pem
      {{ end }}
      {{ if $.Values.global.databaseTls.enable }}
      - name: wallet-volume
        secret:
          secretName: "{{ $.Values.global.databaseTls.clientSecretName }}"
      {{ end }}
      - name: xref-volume
        persistentVolumeClaim:
          claimName: eric-bss-eb-pvc-xref
      - name: pwdmgr-security-volume
        persistentVolumeClaim:
          claimName: eric-bss-eb-pvc-pwdmgr-security
      - name: logs-volume
        persistentVolumeClaim:
          claimName: eric-bss-eb-pvc-logs
      - name: coredump-volume
        persistentVolumeClaim:
          claimName: eric-bss-eb-pvc-coredump
      - name: tnsnames-ora-volume
        configMap:
          name: eric-bss-eb-prih-tnsnames.ora
      - name: sqlnet-ora-volume
        configMap:
          name: eric-bss-eb-prih-sqlnet.ora
      - name: prih-ini-volume
        configMap:
          name: eric-bss-eb-prih.ini
      - name: prih-customized-libs-volume
        emptyDir: {}
      - name: comlock-volume
        configMap:
          name: eric-bss-eb-prih-comlock
      - name: vault-clientcfg-xml-volume
        configMap:
          name: eric-bss-eb-prih-vault-clientcfg.xml
      - name: vault-clientcfg-dtd-volume
        configMap:
          name: eric-bss-eb-prih-vault-clientcfg.dtd
      {{ if and ($.Values.global.secretManager.enable) ($.Values.global.secretManager.vault.caSecretName) }}
      - name: secretmanager-tls-volume
        secret:
          secretName: "{{ $.Values.global.secretManager.vault.caSecretName }}"
          items:
          - key: {{ $.Values.global.secretManager.vault.caCertificate }}
            path: ca.pem
      {{ end }}
      - name: dshm
        emptyDir:
         medium: Memory
---
{{ end }}
