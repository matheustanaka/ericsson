# A Cron Job is launched for each of the items in the $dahJobs of values.yaml file.
# Every occurrence of dahJob variable is replaced during each range loop
# by the dahJobs item from the values.yaml file.
{{- range $dahJob := .Values.dahJobs }}
{{- if $.Capabilities.APIVersions.Has "batch/v1/CronJob" }}
apiVersion: batch/v1
{{- else }}
apiVersion: batch/v1beta1
{{- end }}
kind: CronJob
metadata:
  name: "eric-bss-eb-dah-{{ $dahJob.name | lower }}"
  labels:
    app:  eric-bss-eb-dah
    chart: {{ template "eric-bss-eb-dah.chart" $ }}
    {{- include "eric-bss-eb-dah.kubernetesIoInfo" $ | nindent 4 }}
    heritage: {{ $.Release.Service }}
  annotations:
  {{- include "eric-bss-eb-dah.productInfo" $ | indent 4 }}
spec:
  schedule: {{ $dahJob.schedule | quote }}
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: {{ $dahJob.failedJobsHistoryLimit }}
  successfulJobsHistoryLimit: {{ $dahJob.successfulJobsHistoryLimit }}
  suspend: {{ $.Values.global.suspendCronJobs.dah }}
  jobTemplate:
    spec:
      backoffLimit: {{ $dahJob.backoffLimit }}
      template:
        metadata:
          labels:
            app: eric-bss-eb-dah
            {{- include "eric-bss-eb-dah.kubernetesIoInfo" $ | nindent 12 }}
            eric-bss-eb-network-database-client: 'true'
            eric-bss-eb-network-lem-client: 'true'
            eric-bss-eb-network-vault-client: 'true'
          annotations:
          {{- include "eric-bss-eb-dah.productInfo" $ | indent 12 }}
        spec:
          restartPolicy: Never
          securityContext:
            {{- include "eric-bss-eb-dah.checkPodUserLoginData" $ | nindent 12 }}
          {{- if $.Values.global.rbac.sa_roles_create }}
          serviceAccountName: {{ $.Chart.Name }}-sa
          {{- end }}
          {{- if $.Values.global.imageCredentials.pullSecret }}
          imagePullSecrets:
            - name: {{ $.Values.global.imageCredentials.pullSecret }}
          {{- end }}
          containers:
            - name: eric-bss-eb-dah
              # containerKey identifies the section inside .Values.images and .Values.imageCredentials to be used here
              {{ $templDict := dict "Values" $.Values "containerKey" "eric-bss-eb-dah" }}
              image: "{{ template "eric-bss-eb-dah.registryUrl" $templDict }}/{{ template "eric-bss-eb-dah.repoPath" $templDict }}{{ index $.Values "images" $templDict.containerKey "name" }}:{{ index $.Values "images" $templDict.containerKey "tag" }}"
              imagePullPolicy: {{ template "eric-bss-eb-dah.pullPolicy" $templDict }}
              resources:
                limits:
                  memory: "{{ $.Values.resources.limits.memory}}"
                  cpu: "{{ $.Values.resources.limits.cpu}}"
                requests:
                  memory: "{{ $.Values.resources.requests.memory}}"
                  cpu: "{{ $.Values.resources.requests.cpu}}"
              env:
              - name: K8S_ENV
                value: "true"
              {{ if $.Values.global.databaseTls.enable }}
              - name: ORA_SEC_WLT
                value: "/oratns/secret"
              {{ end }}
              - name: NLS_LANG
                value: "{{ $.Values.global.nlsLang }}"
              - name: TZ
                value: "{{ $.Values.global.timezone }}"
              - name: DAH_INPUTDIR
                value: "/workdir/DOCS"
              {{ if not $.Values.global.secretManager.enable }}
              - name: NO_SECRET_MANAGER
                value: "true"
              {{ end }}
              command: ["/bin/bash"]
              args: ["-c", "ulimit -c unlimited && mkdir -p {{ $.Values.global.coredumpDirectory }} && \
                            ./dah {{ $dahJob.startParameters.runParameters }} \
                                  {{ if $dahJob.startParameters.traceModeLevel }} -t {{ end }}"]
              volumeMounts:
              {{- range $dahVolumes := $.Values.dahVolumes }}
              - name: {{ $dahVolumes.name | lower }}-volume
                mountPath: {{ $dahVolumes.mountPath }}
              {{- end }}
              - name: print-volume
                mountPath: /workdir/BGH/PRINT
              - name: pwdmgr-security-volume
                mountPath: /workdir/PWDMGR_SECURITY
              - name: logs-volume
                mountPath: /log
              - name: docs-volume
                mountPath: /workdir/DOCS
              - name: dih-input-volume
                mountPath: /workdir/dih_in
              - name: coredump-volume
                mountPath: "{{ $.Values.global.coredumpDirectory }}"
              - name: tnsnames-ora-volume
                mountPath: /oratns/tnsnames.ora
                subPath: tnsnames.ora
              - name: sqlnet-ora-volume
                mountPath: /oratns/sqlnet.ora
                subPath: sqlnet.ora
              {{ if $.Values.global.databaseTls.enable }}
              - name: wallet-volume
                mountPath: "/oratns/secret"
              {{ end }}
              {{ if and ($.Values.global.secretManager.enable) ($.Values.global.secretManager.vault.caSecretName) }}
              - name: secretmanager-tls-volume
                mountPath: "/tls/secretManager/vault"
                readOnly: true
              {{ end }}
              - name: vault-clientcfg-xml-volume
                mountPath: /ericssonbilling/resource/vault-clientcfg/vault-clientcfg.xml
                subPath: vault-clientcfg.xml
              - name: vault-clientcfg-dtd-volume
                mountPath: /ericssonbilling/resource/vault-clientcfg/vault-clientcfg.dtd
                subPath: vault-clientcfg.dtd
          {{- if $dahJob.nodeSelector }}
          nodeSelector: {{ toYaml $dahJob.nodeSelector | nindent 12 }}
          {{- else if $.Values.global.nodeSelector }}
          nodeSelector: {{ toYaml $.Values.global.nodeSelector | nindent 12 }}
          {{- end }}
          {{- if $dahJob.affinity }}
          affinity: {{ toYaml $dahJob.affinity | nindent 12 }}
          {{- else if $.Values.global.affinity }}
          affinity: {{ toYaml $.Values.global.affinity | nindent 12 }}
          {{- end }}
          volumes:
          {{- range $dahVolumes := $.Values.dahVolumes }}
          - name: {{ $dahVolumes.name | lower }}-volume
            persistentVolumeClaim:
              claimName: {{ $dahVolumes.claimName }}
          {{- end}}
          - name: print-volume
            persistentVolumeClaim:
              claimName: eric-bss-eb-pvc-print
          - name: pwdmgr-security-volume
            persistentVolumeClaim:
              claimName: eric-bss-eb-pvc-pwdmgr-security
          - name: logs-volume
            persistentVolumeClaim:
              claimName: eric-bss-eb-pvc-logs
          - name: docs-volume
            persistentVolumeClaim:
              claimName: eric-bss-eb-pvc-docs
          - name: dih-input-volume
            persistentVolumeClaim:
              claimName: eric-bss-eb-dih-pvc-input
          - name: coredump-volume
            persistentVolumeClaim:
              claimName: eric-bss-eb-pvc-coredump
          - name: tnsnames-ora-volume
            configMap:
              name: eric-bss-eb-dah-tnsnames.ora
          - name: sqlnet-ora-volume
            configMap:
              name: eric-bss-eb-dah-sqlnet.ora
          - name: vault-clientcfg-xml-volume
            configMap:
              name: eric-bss-eb-dah-vault-clientcfg.xml
          - name: vault-clientcfg-dtd-volume
            configMap:
              name: eric-bss-eb-dah-vault-clientcfg.dtd
          {{ if and ($.Values.global.secretManager.enable) ($.Values.global.secretManager.vault.caSecretName) }}
          - name: secretmanager-tls-volume
            secret:
              secretName: "{{ $.Values.global.secretManager.vault.caSecretName }}"
              items:
              - key: {{ $.Values.global.secretManager.vault.caCertificate }}
                path: ca.pem
          {{ end }}
          {{ if $.Values.global.databaseTls.enable }}
          - name: wallet-volume
            secret:
              secretName: "{{ $.Values.global.databaseTls.clientSecretName }}"
          {{ end }}
---
{{- end}}
