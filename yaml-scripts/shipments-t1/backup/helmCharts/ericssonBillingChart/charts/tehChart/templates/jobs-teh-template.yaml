{{ define "eric-bss-eb-teh.job-template" }}
# This file contains the common part for jobs and
# cronjobs and is included into the job and cronjob
# yaml files
backoffLimit: 0
template:
  metadata:
    labels:
      app: eric-bss-eb-teh
      {{- include "eric-bss-eb-teh.kubernetesIoInfo" $ | nindent 6 }}
      eric-bss-eb-network-database-client: 'true'
      eric-bss-eb-network-data-client: 'true'
      eric-bss-eb-network-lem-client: 'true'
      eric-bss-eb-network-vault-client: 'true'
    annotations:
    {{- include "eric-bss-eb-teh.productInfo" $ | indent 6 }}
  spec:
    terminationGracePeriodSeconds: {{ $.Values.terminationGracePeriodSeconds }}
    securityContext:
      {{- include "eric-bss-eb-teh.checkPodUserLoginData" $ | nindent 6 }}
    {{- if $.Values.global.imageCredentials.pullSecret }}
    imagePullSecrets:
      - name: {{ $.Values.global.imageCredentials.pullSecret }}
    {{- end }}
    initContainers:
      - name: init-wait-for-data
        # containerKey identifies the section inside .Values.images and .Values.imageCredentials to be used here
        {{ $templDict := dict "Values" .Values "containerKey" "init-wait-for-data" }}
        image: "{{ template "eric-bss-eb-teh.registryUrl" $templDict }}/{{ template "eric-bss-eb-teh.repoPath" $templDict }}{{ index .Values "images" $templDict.containerKey "name" }}:{{ index .Values "images" $templDict.containerKey "tag" }}"
        imagePullPolicy: {{ template "eric-bss-eb-teh.pullPolicy" $templDict }}
        command: ["/bin/bash"]
        args: ["-c", "./waitForCondition.sh dmh {{ .Values.global.conditionCheckInterval }} "]
        env:
        {{ if .Values.global.dataHighAvailability.enable }}
        - name: DATA_CONNECT_NAME
          value: "{{ .Values.global.dataServerName }}"
        - name: DATA_CONNECT_ADDRESS
          value: "T:eric-bss-eb-data-service:{{ .Values.global.dataClusterPort }},T:eric-bss-eb-data1-service:{{ .Values.global.dataClusterPort }}"
        - name: DATA_CONNECT_MODE
          value: "0"
        {{ else }}
        - name: DATA_SERVER_ADDRESS
          value: "T:eric-bss-eb-data-service:{{ .Values.global.dataClusterPort }}"
        {{ end }}
        - name: TZ
          value: "{{ .Values.global.timezone }}"
        - name: BSCS_LOG_FULL
          value: "/log/teh"
        volumeMounts:
        {{ if .Values.global.securityTls.enable }}
        - name: tls-volume
          mountPath: "/tls/connect"
          readOnly: true
        {{ end }}
        - mountPath: /log
          name: logs-volume
    {{- if .Values.global.rbac.sa_roles_create }}
    serviceAccountName: {{ .Chart.Name }}-sa
    {{- end }}
    containers:
      - name: eric-bss-eb-teh
        # containerKey identifies the section inside .Values.images and .Values.imageCredentials to be used here
        {{ $templDict := dict "Values" .Values "containerKey" "teh" }}
        image: "{{ template "eric-bss-eb-teh.registryUrl" $templDict }}/{{ template "eric-bss-eb-teh.repoPath" $templDict }}{{ index .Values "images" $templDict.containerKey "name" }}:{{ index .Values "images" $templDict.containerKey "tag" }}"
        imagePullPolicy: {{ template "eric-bss-eb-teh.pullPolicy" $templDict }}
        resources:
          limits:
            memory: "{{ .Values.resources.limits.memory}}"
            cpu: "{{ .Values.resources.limits.cpu}}"
          requests:
            memory: "{{ .Values.resources.requests.memory}}"
            cpu: "{{ .Values.resources.requests.cpu}}"
        env:
        - name: K8S_ENV
          value: "true"
        {{ if $.Values.global.databaseTls.enable }}
        - name: ORA_SEC_WLT
          value: "/oratns/secret"
        {{ end }}
        - name: DXL_CONTINUE_AFTER_CORRUPT
          value: "{{ .Values.global.tracingAndLogging.dxlContinueAfterCorrupt }}"
        - name: NLS_LANG
          value: "{{ .Values.global.nlsLang }}"
        {{ if .Values.global.dataHighAvailability.enable }}
        - name: DATA_CONNECT_NAME
          value: "{{ .Values.global.dataServerName }}"
        - name: DATA_CONNECT_ADDRESS
          value: "T:eric-bss-eb-data-service:{{ .Values.global.dataClusterPort }},T:eric-bss-eb-data1-service:{{ .Values.global.dataClusterPort }}"
        - name: DATA_CONNECT_MODE
          value: "0"
        {{ else }}
        - name: DATA_SERVER_ADDRESS
          value: "T:eric-bss-eb-data-service:{{ .Values.global.dataClusterPort }}"
        {{ end }}
        - name: DATABASE_SERVER_NAME
          value: "{{ .Values.global.databaseServerName }}"
        - name: DATABASE_SERVER_PORT
          value: "{{ .Values.global.databaseServerPort }}"
        - name: OPTIONS
          value: "{{ .startParameters }} "
        - name: TZ
          value: "{{ .Values.global.timezone }}"
        {{ if .Values.global.securityTls.enable }}
        - name: DATA_SSL_CONNECT
          value: "1"
        - name: DATA_CIPHER_LIST
          value: "{{ $.Values.global.securityTls.cipherList }}"
        {{ end }}
        {{ if .Values.tracingAndLogging }}
        {{ if .Values.tracingAndLogging.dtaTracefile }}
        - name: DTA_TRACEFILE
          value: "{{ .Values.tracingAndLogging.dtaTracefile }}"
        {{ end }}
        {{ end }}
        - name: DATA_RETRY_TIME
          value: "{{ .Values.dataRetry.dataRetryTime }}"
        - name: DATA_RETRY_TIME_MAX
          value: "{{ .Values.dataRetry.dataRetryTimeMax }}"
        {{ if not $.Values.global.secretManager.enable }}
        - name: NO_SECRET_MANAGER
          value: "true"
        {{ end }}
        command: ["/bin/bash"]
        args: ["-c", "ulimit -c unlimited && mkdir -p /log/teh && mkdir -p {{ .Values.global.coredumpDirectory }} && ./pteh ${OPTIONS}"]
        volumeMounts:
        {{ if .Values.global.securityTls.enable }}
        - name: tls-volume
          mountPath: "/tls/connect"
          readOnly: true
        {{ end }}
        {{ if and ($.Values.global.secretManager.enable) ($.Values.global.secretManager.vault.caSecretName) }}
        - name: secretmanager-tls-volume
          mountPath: "/tls/secretManager/vault"
          readOnly: true
        {{ end }}
        {{ if $.Values.global.databaseTls.enable }}
        - name: wallet-volume
          mountPath: /oratns/secret
        {{ end }}
        - name: ctrl-volume
          mountPath: /workdir/CTRL
        - name: xref-volume
          mountPath: /workdir/XREF
        - name: pwdmgr-security-volume
          mountPath: /workdir/PWDMGR_SECURITY
        - name: logs-volume
          mountPath: /log
        - name: coredump-volume
          mountPath: "{{ .Values.global.coredumpDirectory }}"
        - name: tnsnames-ora-volume
          mountPath: /oratns/tnsnames.ora
          subPath: tnsnames.ora
        - name: sqlnet-ora-volume
          mountPath: /oratns/sqlnet.ora
          subPath: sqlnet.ora
        - name: vault-clientcfg-xml-volume
          mountPath: /ericssonbilling/resource/vault-clientcfg/vault-clientcfg.xml
          subPath: vault-clientcfg.xml
        - name: vault-clientcfg-dtd-volume
          mountPath: /ericssonbilling/resource/vault-clientcfg/vault-clientcfg.dtd
          subPath: vault-clientcfg.dtd
    {{- if $.Values.nodeSelector }}
    nodeSelector: {{ toYaml $.Values.nodeSelector | nindent 6 }}
    {{- else if $.Values.global.nodeSelector }}
    nodeSelector: {{ toYaml $.Values.global.nodeSelector | nindent 6 }}
    {{- end }}
    {{- if $.Values.affinity }}
    affinity: {{ toYaml $.Values.affinity | nindent 6 }}
    {{- else if $.Values.global.affinity }}
    affinity: {{ toYaml $.Values.global.affinity | nindent 6 }}
    {{- end }}
    restartPolicy: "Never"
    volumes:
    {{ if .Values.global.securityTls.enable }}
    - name: tls-volume
      secret:
        secretName: "{{ .Values.global.securityTls.clientSecretName }}"
        items:
        - key: {{ .Values.global.securityTls.trustedCertificateKey }}
          path: certificate.pem
    {{ end }}
    {{ if and ($.Values.global.secretManager.enable) ($.Values.global.secretManager.vault.caSecretName) }}
    - name: secretmanager-tls-volume
      secret:
        secretName: "{{ $.Values.global.secretManager.vault.caSecretName }}"
        items:
        - key: {{ $.Values.global.secretManager.vault.caCertificate }}
          path: ca.pem
    {{ end }}
    {{ if $.Values.global.databaseTls.enable }}
    - name: wallet-volume
      secret:
        secretName: "{{ $.Values.global.databaseTls.clientSecretName }}"
    {{ end }}
    - name: ctrl-volume
      persistentVolumeClaim:
        claimName: eric-bss-eb-pvc-pids
    - name: xref-volume
      persistentVolumeClaim:
        claimName: eric-bss-eb-pvc-xref
    - name: pwdmgr-security-volume
      persistentVolumeClaim:
        claimName: eric-bss-eb-pvc-pwdmgr-security
    - name: logs-volume
      persistentVolumeClaim:
        claimName: eric-bss-eb-pvc-logs
    - name: coredump-volume
      persistentVolumeClaim:
        claimName: eric-bss-eb-pvc-coredump
    - name: tnsnames-ora-volume
      configMap:
        name: eric-bss-eb-teh-tnsnames.ora
    - name: sqlnet-ora-volume
      configMap:
        name: eric-bss-eb-teh-sqlnet.ora
    - name: vault-clientcfg-xml-volume
      configMap:
        name: eric-bss-eb-teh-vault-clientcfg.xml
    - name: vault-clientcfg-dtd-volume
      configMap:
        name: eric-bss-eb-teh-vault-clientcfg.dtd
{{ end }}
